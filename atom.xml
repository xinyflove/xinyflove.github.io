<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Peak Xin</title>
  
  <subtitle>小峰的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xinyufeng.net/"/>
  <updated>2024-08-29T05:28:47.380Z</updated>
  <id>https://xinyufeng.net/</id>
  
  <author>
    <name>Peak Xin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Boot 项目打包及在宝塔面板上部署的简易指南</title>
    <link href="https://xinyufeng.net/2024/08/29/Spring%20Boot%20%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E5%8F%8A%E5%9C%A8%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF%E4%B8%8A%E9%83%A8%E7%BD%B2%E7%9A%84%E7%AE%80%E6%98%93%E6%8C%87%E5%8D%97/"/>
    <id>https://xinyufeng.net/2024/08/29/Spring Boot 项目打包及在宝塔面板上部署的简易指南/</id>
    <published>2024-08-29T02:58:19.000Z</published>
    <updated>2024-08-29T05:28:47.380Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>一个可以访问的服务器，已安装宝塔面板。</li><li>Java开发环境（JDK）已安装在服务器上。</li><li>Maven或Gradle等构建工具，用于打包 Spring Boot 项目，我这里用的是 Maven</li><li>集成开发环境，我这里使用的是IntelliJ IDEA。</li></ul><h2 id="项目打包"><a href="#项目打包" class="headerlink" title="项目打包"></a>项目打包</h2><ol><li>配置 pom.xml（针对 Maven）：</li></ol><p>因为我这边是通过阿里云云原生应用脚手架生成的 Spring Boot 项目，所以在 <code>pom.xml</code> 文件中包含了 Spring Boot 插件，示例如下：</p><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 其他配置信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.pennon.javaservice.JavaServiceApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">skip</span>&gt;</span>false<span class="tag">&lt;/<span class="name">skip</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>要注意的是，<code>spring-boot-maven-plugin</code> 插件配置中的 <code>skip</code> 属性要设置为 <code>false</code>。 默认被设置为 <code>true</code>，这会导致 <code>Spring Boot</code> 在打包时跳过构建可执行 <code>JAR</code> 文件的操作，在生成的 <code>JAR</code> 文件中缺少必要的主清单属性，从而会导致 “no main manifest attribute” 的错误。</p><ol start="2"><li>打包项目：</li></ol><p>我这里直接通过 IntelliJ IDEA 右边栏的 Maven 插件，先执行 <code>clean</code> 命令，然后选择 <code>package</code> 命令，然后等待打包完成。</p><p>在 <code>target</code> 目录下，就会生成一个 <code>jar</code> 文件，这个文件就是我们最终要部署的 Spring Boot 项目。</p><h2 id="部署到宝塔面板"><a href="#部署到宝塔面板" class="headerlink" title="部署到宝塔面板"></a>部署到宝塔面板</h2><ol><li>上传构建产物</li></ol><p>使用FTP客户端或宝塔面板的文件管理功能，将构建好的JAR文件上传到服务器的指定目录（比如<code>/www/wwwroot/your_project</code>目录下）。</p><ol start="2"><li>新建Java项目</li></ol><p>在“网站”管理中的“Java项目”Tab页下，点击“添加Java项目”，填写项目信息：</p><ul><li>项目类型：选择 SpringBoot</li><li>项目jar路径：选择刚刚上传的JAR文件</li><li>项目名称：自定义填写</li><li>项目端口：默认8080即可，并选中“放行端口”选项</li><li>项目JDK：选择已安装的JDK版本</li><li>项目执行命令：默认即可，无需修改</li><li>其他参数：默认即可，无需修改</li></ul><p>然后点击“确定”按钮，等待项目创建完成，一般创建成功后，项目就启动了。</p><p>如果项目状态未显示“运行中”，请点击“设置”按钮，检查项目日志，查看是否有错误信息。</p><ol start="3"><li>访问项目</li></ol><p>在浏览器中输入服务器的IP地址和项目端口号，即可访问到Spring Boot项目。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;一个可以访问的服务器，已安装宝塔面板。&lt;/li&gt;
&lt;li&gt;Java开发环境（JDK）已安装在服务器上。&lt;/li&gt;
&lt;li&gt;Maven或Gradle等构建工具，用于打包 Spring Boot 项目，我这里用的是 Maven&lt;/li&gt;
&lt;li&gt;集成开发环境，我这里使用的是IntelliJ IDEA。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;项目打包&quot;&gt;&lt;a href=&quot;#项目打包&quot; class=&quot;headerlink&quot; title=&quot;项目打包&quot;&gt;&lt;/a&gt;项目打包&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;配置 pom.xml（针对 Maven）：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因为我这边是通过阿里云云原生应用脚手架生成的 Spring Boot 项目，所以在 &lt;code&gt;pom.xml&lt;/code&gt; 文件中包含了 Spring Boot 插件，示例如下：&lt;/p&gt;
    
    </summary>
    
      <category term="Java框架" scheme="https://xinyufeng.net/categories/Java%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Spring Boot" scheme="https://xinyufeng.net/categories/Java%E6%A1%86%E6%9E%B6/Spring-Boot/"/>
    
    
      <category term="Java" scheme="https://xinyufeng.net/tags/Java/"/>
    
      <category term="Spring Boot" scheme="https://xinyufeng.net/tags/Spring-Boot/"/>
    
      <category term="宝塔" scheme="https://xinyufeng.net/tags/%E5%AE%9D%E5%A1%94/"/>
    
      <category term="部署" scheme="https://xinyufeng.net/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>快速搭建和运行Spring Boot项目的简易指南</title>
    <link href="https://xinyufeng.net/2024/08/28/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%92%8C%E8%BF%90%E8%A1%8CSpring-Boot%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%AE%80%E6%98%93%E6%8C%87%E5%8D%97/"/>
    <id>https://xinyufeng.net/2024/08/28/快速搭建和运行Spring-Boot项目的简易指南/</id>
    <published>2024-08-28T06:58:59.000Z</published>
    <updated>2024-08-28T08:09:25.064Z</updated>
    
    <content type="html"><![CDATA[<p>对于非Java开发的后端开发人员而言，即便未曾接触过Java，也可能听说过Spring Boot这一框架。若想要快速搭建并运行一个Spring Boot项目，可以遵循以下步骤：</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li><strong>安装Java JDK：</strong>确保您的开发环境中安装了Java JDK8（JDK1.8或JDK8）或更高版本，我这里用的是JDK8。</li><li><strong>安装Maven：</strong>Maven是Java项目构建和依赖管理工具，确保已安装并配置好环境变量。</li><li><strong>IDE（集成开发环境）：</strong>推荐使用IntelliJ IDEA或Eclipse，这些工具可以帮助你轻松管理和运行Java项目，我这里使用的是IntelliJ IDEA。</li></ul><a id="more"></a><h2 id="使用Spring-Initializr生成项目"><a href="#使用Spring-Initializr生成项目" class="headerlink" title="使用Spring Initializr生成项目"></a>使用Spring Initializr生成项目</h2><p>Spring Initializr是一个在线工具，可以快速生成Spring Boot项目的初始结构。以下是使用Spring Initializr生成项目的步骤：</p><p>这里我们使用的是阿里云云原生应用脚手架（Cloud Native App Initializer），打开浏览器访问<a href="https://start.aliyun.com" target="_blank" rel="noopener">https://start.aliyun.com</a>，填写配置项目配置参数</p><p><img src="/2024/08/28/快速搭建和运行Spring-Boot项目的简易指南/1.png" alt="在这里插入图片描述"></p><p><strong>配置项目参数：</strong></p><ul><li>项目构建方式（Project）: 选择“Maven Project”</li><li>开发语言（Language）: 选择“Java”</li><li>Spring Boot版本（Spring Boot）: 默认选择最新稳定版</li><li>项目基本信息（Project Metadata）:<ul><li>Group: 输入项目的组织名，例如com.example</li><li>Artifact: 输入项目的名称，例如demo（项目的唯一标识）</li><li>项目名称（Name）：输入项目的名称，例如demo</li><li>项目描述（Description）：输入项目的描述，例如一个简单的Spring Boot项目</li><li>基础包（Package name）：输入项目的基础包，例如com.example.demo</li><li>打包方式（Packaging）: 选择“Jar”</li><li>Java版本: 选择你安装的Java版本（如8）。</li></ul></li><li>应用架构： 选择“单模块”</li><li>组件与示例（Dependencies）: 选择你需要的依赖。通常，选择“Spring Web”就足够了，它会提供基本的Web开发支持。</li></ul><p>生成并下载项目： 点击“获取代码（Generate）”按钮，下载生成的项目压缩包。</p><h2 id="导入项目到IDE"><a href="#导入项目到IDE" class="headerlink" title="导入项目到IDE"></a>导入项目到IDE</h2><p>解压缩项目： 将下载的压缩包解压到本地目录。</p><p>导入到IDE：</p><ul><li>IntelliJ IDEA:</li></ul><p>打开IDE，选择“Open”并选择解压后的项目目录。<br>IDEA会自动识别Maven项目并进行初始化。</p><ul><li>Eclipse:</li></ul><p>打开IDE，选择“File” -&gt; “Import”。<br>选择“Maven” -&gt; “Existing Maven Projects”，然后选择解压后的项目目录。</p><h2 id="运行Spring-Boot应用"><a href="#运行Spring-Boot应用" class="headerlink" title="运行Spring Boot应用"></a>运行Spring Boot应用</h2><p>找到主程序类： 在IDE中，找到主程序类（通常是<code>Application.java</code>），这个类位于<code>src/main/java/com/example/demo</code>目录下（具体路径取决于你在Spring Initializr中设置的包名）。</p><p>运行主程序（这里的主程序文件是<code>DemoApplication.java</code>）：</p><ul><li>IntelliJ IDEA:</li></ul><p>右键点击<code>DemoApplication.java</code>，选择“Run ‘DemoApplication’”。</p><ul><li>Eclipse:</li></ul><p>右键点击<code>DemoApplication.java</code>，选择“Run As” -&gt; “Java DemoApplication”。</p><p>访问应用： 启动成功后，打开浏览器并访问<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a>，你应该能够看到Spring Boot的欢迎页面或者你自定义的内容。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>即使你没有Java开发经验，使用Spring Boot搭建和运行项目也变得非常简单。通过Spring Initializr生成项目模板，然后通过IDE导入和运行，你可以快速上手并体验Spring Boot的强大功能。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于非Java开发的后端开发人员而言，即便未曾接触过Java，也可能听说过Spring Boot这一框架。若想要快速搭建并运行一个Spring Boot项目，可以遵循以下步骤：&lt;/p&gt;
&lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;安装Java JDK：&lt;/strong&gt;确保您的开发环境中安装了Java JDK8（JDK1.8或JDK8）或更高版本，我这里用的是JDK8。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安装Maven：&lt;/strong&gt;Maven是Java项目构建和依赖管理工具，确保已安装并配置好环境变量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IDE（集成开发环境）：&lt;/strong&gt;推荐使用IntelliJ IDEA或Eclipse，这些工具可以帮助你轻松管理和运行Java项目，我这里使用的是IntelliJ IDEA。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java框架" scheme="https://xinyufeng.net/categories/Java%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Spring Boot" scheme="https://xinyufeng.net/categories/Java%E6%A1%86%E6%9E%B6/Spring-Boot/"/>
    
    
      <category term="Java" scheme="https://xinyufeng.net/tags/Java/"/>
    
      <category term="Spring Boot" scheme="https://xinyufeng.net/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>在 Windows 上生成本地 SSL 证书并使用 HTTPS 访问本地 Nginx 服务器</title>
    <link href="https://xinyufeng.net/2024/08/16/%E5%9C%A8-Windows-%E4%B8%8A%E7%94%9F%E6%88%90%E6%9C%AC%E5%9C%B0-SSL-%E8%AF%81%E4%B9%A6%E5%B9%B6%E4%BD%BF%E7%94%A8-HTTPS-%E8%AE%BF%E9%97%AE%E6%9C%AC%E5%9C%B0-Nginx-%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://xinyufeng.net/2024/08/16/在-Windows-上生成本地-SSL-证书并使用-HTTPS-访问本地-Nginx-服务器/</id>
    <published>2024-08-16T08:19:42.000Z</published>
    <updated>2024-08-16T08:59:50.173Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在开发和测试过程中，使用 HTTPS 进行本地开发可以模拟生产环境，确保应用程序在实际部署时的安全性。本文将介绍如何在 Windows 环境中生成本地 SSL 证书，并将其配置到 Nginx 服务器上，以便通过 HTTPS 访问本地服务器。</p><h2 id="安装必要工具"><a href="#安装必要工具" class="headerlink" title="安装必要工具"></a>安装必要工具</h2><h3 id="安装-OpenSSL"><a href="#安装-OpenSSL" class="headerlink" title="安装 OpenSSL"></a>安装 OpenSSL</h3><p>OpenSSL 是一个用于生成和管理 SSL/TLS 证书的工具。下载并安装 OpenSSL：</p><ol><li>访问 <a href="https://slproweb.com/products/Win32OpenSSL.html" target="_blank" rel="noopener">OpenSSL 的 Windows 安装程序</a>。</li><li>下载适合你 Windows 版本的安装程序（例如 Win64 OpenSSL v3.3.1）。<br>按照安装程序的提示完成安装。</li><li>安装后配置把<code>D:\Program Files\OpenSSL-Win64\bin</code>配置到环境变量。</li></ol><a id="more"></a><h3 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h3><p>我使用的是PHPStudy集成环境，自带Nginx服务器。</p><h2 id="生成本地-SSL-证书"><a href="#生成本地-SSL-证书" class="headerlink" title="生成本地 SSL 证书"></a>生成本地 SSL 证书</h2><h3 id="创建证书和私钥"><a href="#创建证书和私钥" class="headerlink" title="创建证书和私钥"></a>创建证书和私钥</h3><ol><li>打开命令提示符（cmd）或 PowerShell。</li><li>运行以下命令生成一个新的私钥和自签名证书：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout localhost.key -out localhost.crt</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>-x509</code>：指定生成自签名证书。</li><li><code>-nodes</code>：不对私钥加密。</li><li><code>-days 365</code>：证书有效期为 365 天。</li><li><code>-newkey rsa:2048</code>：生成一个新的 RSA 密钥。</li><li><code>-keyout</code>：指定私钥输出路径。</li><li><code>-out</code>：指定证书输出路径。</li></ul><ol start="3"><li>在提示符下，输入证书信息<ul><li>国家：填写<code>CN</code></li><li>州/省：填写<code>ShandDong</code>（根据自身情况填写即可）</li><li>市：填写<code>QingDao</code>（根据自身情况填写即可）</li><li>组织：填写公司名称英文即可（根据自身情况填写即可）</li><li>组织单位：填写部门名称英文即可（根据自身情况填写即可）</li><li>公共名称：对于本地开发，Common Name 应设置为 <code>localhost</code></li><li>电子邮件: （根据自身情况填写即可）</li></ul></li></ol><h2 id="配置-Nginx-使用-SSL"><a href="#配置-Nginx-使用-SSL" class="headerlink" title="配置 Nginx 使用 SSL"></a>配置 Nginx 使用 SSL</h2><h3 id="修改-Nginx-配置文件"><a href="#修改-Nginx-配置文件" class="headerlink" title="修改 Nginx 配置文件"></a>修改 Nginx 配置文件</h3><p>打开 Nginx 配置文件（nginx.conf）。该文件通常位于 Nginx 安装目录的 conf 子目录下。或者vhost目录下的子域名配置文件。</p><p>编辑配置文件，添加以下内容以启用 HTTPS：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>        <span class="number">443</span> ssl;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line">        <span class="attribute">root</span>   <span class="string">"D:/phpstudy_pro/WWW"</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">ssl_certificate</span> D:/phpstudy_pro/Extensions/Nginx1.<span class="number">15</span>.<span class="number">11</span>/conf/ssl/localhost.crt;</span><br><span class="line"><span class="attribute">ssl_certificate_key</span> D:/phpstudy_pro/Extensions/Nginx1.<span class="number">15</span>.<span class="number">11</span>/conf/ssl/localhost.key;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">index</span> index.php index.html;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ \.php(.*)$</span> &#123;</span><br><span class="line">            <span class="attribute">fastcgi_pass</span>   <span class="number">127.0.0.1:9009</span>;</span><br><span class="line">            <span class="attribute">fastcgi_index</span>  index.php;</span><br><span class="line">            <span class="attribute">fastcgi_split_path_info</span> <span class="regexp"> ^((?U).+\.php)(/?.+)$</span>;</span><br><span class="line">            <span class="attribute">fastcgi_param</span>  SCRIPT_FILENAME  <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">            <span class="attribute">fastcgi_param</span>  PATH_INFO  <span class="variable">$fastcgi_path_info</span>;</span><br><span class="line">            <span class="attribute">fastcgi_param</span>  PATH_TRANSLATED  <span class="variable">$document_root</span><span class="variable">$fastcgi_path_info</span>;</span><br><span class="line">            <span class="attribute">include</span>        fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置了 HTTPS 监听（端口 443），并指定了证书和私钥的位置。配置文件内容根据自己的实际情况配置。</p><h3 id="重新启动-Nginx"><a href="#重新启动-Nginx" class="headerlink" title="重新启动 Nginx"></a>重新启动 Nginx</h3><p>根据实际情况重启Nginx服务器。</p><h2 id="测试-HTTPS-配置"><a href="#测试-HTTPS-配置" class="headerlink" title="测试 HTTPS 配置"></a>测试 HTTPS 配置</h2><ol><li>打开浏览器，访问 <code>https://localhost</code>。</li><li>浏览器可能会提示不安全的证书。由于我们使用的是自签名证书，浏览器无法验证其真实性。你可以选择忽略警告并继续访问。</li><li>如果一切配置正确，你应该能够看到 Nginx 的欢迎页面或你配置的网页内容。</li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="浏览器警告"><a href="#浏览器警告" class="headerlink" title="浏览器警告"></a>浏览器警告</h3><p>自签名证书不会被浏览器信任，你可以将证书添加到受信任的根证书颁发机构来避免警告。操作方法因浏览器不同而有所不同。</p><h3 id="证书过期"><a href="#证书过期" class="headerlink" title="证书过期"></a>证书过期</h3><p>自签名证书有一个有效期（本文中设置为 365 天）。证书过期后，你需要重新生成证书并更新 Nginx 配置。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上步骤，你已成功在 Windows 环境中生成本地 SSL 证书，并配置 Nginx 以支持 HTTPS。使用 HTTPS 进行本地开发可以确保你的应用在实际部署时符合安全要求，并提供更好的用户体验。如果你遇到任何问题或有任何疑问，请在评论区留言讨论。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;在开发和测试过程中，使用 HTTPS 进行本地开发可以模拟生产环境，确保应用程序在实际部署时的安全性。本文将介绍如何在 Windows 环境中生成本地 SSL 证书，并将其配置到 Nginx 服务器上，以便通过 HTTPS 访问本地服务器。&lt;/p&gt;
&lt;h2 id=&quot;安装必要工具&quot;&gt;&lt;a href=&quot;#安装必要工具&quot; class=&quot;headerlink&quot; title=&quot;安装必要工具&quot;&gt;&lt;/a&gt;安装必要工具&lt;/h2&gt;&lt;h3 id=&quot;安装-OpenSSL&quot;&gt;&lt;a href=&quot;#安装-OpenSSL&quot; class=&quot;headerlink&quot; title=&quot;安装 OpenSSL&quot;&gt;&lt;/a&gt;安装 OpenSSL&lt;/h3&gt;&lt;p&gt;OpenSSL 是一个用于生成和管理 SSL/TLS 证书的工具。下载并安装 OpenSSL：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;访问 &lt;a href=&quot;https://slproweb.com/products/Win32OpenSSL.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OpenSSL 的 Windows 安装程序&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;下载适合你 Windows 版本的安装程序（例如 Win64 OpenSSL v3.3.1）。&lt;br&gt;按照安装程序的提示完成安装。&lt;/li&gt;
&lt;li&gt;安装后配置把&lt;code&gt;D:\Program Files\OpenSSL-Win64\bin&lt;/code&gt;配置到环境变量。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="运维" scheme="https://xinyufeng.net/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="开发环境" scheme="https://xinyufeng.net/tags/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>通过PHP语言解读什么是容器、依赖注入和控制反转</title>
    <link href="https://xinyufeng.net/2024/07/12/%E9%80%9A%E8%BF%87PHP%E8%AF%AD%E8%A8%80%E8%A7%A3%E8%AF%BB%E4%BB%80%E4%B9%88%E6%98%AF%E5%AE%B9%E5%99%A8%E3%80%81%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E5%92%8C%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC/"/>
    <id>https://xinyufeng.net/2024/07/12/通过PHP语言解读什么是容器、依赖注入和控制反转/</id>
    <published>2024-07-12T05:41:49.000Z</published>
    <updated>2024-07-12T08:11:52.083Z</updated>
    
    <content type="html"><![CDATA[<p>名词解释：</p><ul><li>IoC：Inversion of Control（控制反转）</li><li>DI：Dependency Injection（依赖注入）</li><li>容器：Container</li></ul><p>Laravel框架可能是PHP开发者最常用的框架之一，它的核心就是一个<strong>IoC容器</strong>，根据文档称其为<strong>服务容器</strong>，顾名思义该容器提供了整个框架中需要的一系列服务。作为初学者很多人会在这一个概念上犯难，因此我们可以从一些基础的内容开始讲解，通过理解面向对象开发中依赖的生产和解决方法，来逐步揭开“依赖注入”的面纱，逐渐理解这一神奇的设计理念。</p><a id="more"></a><h2 id="依赖的产生——超人和超能力"><a href="#依赖的产生——超人和超能力" class="headerlink" title="依赖的产生——超人和超能力"></a>依赖的产生——超人和超能力</h2><p>面向对象编程，有以下几样东西无时无刻的接触，<strong>接口</strong>、<strong>类</strong>还有<strong>对象</strong>。这其中，</p><ul><li>接口是类的原型，一个类必须要遵守其实现的接口；</li><li>对象则是一个类实例化后的产物，我们称为一个实例。</li></ul><p>为了便于理解，我们用代码来辅助解释。</p><blockquote><p>“怪兽横行的世界，总归需要点超级人物来摆平。”</p></blockquote><p>我们把一个<strong>超人</strong>作为一个类：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 超人类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Superman</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>我们可以想象，一个超人诞生的时候肯定拥有至少一个超能力，这个超能力可以抽象为一个对象，为这个对象定义一个描述他的类吧。一个超能力肯定有多种属性、（操作）方法，这个尽情想象，但是目前我们先大致定义一个只要属性的“超能力”，至于能干啥，我们以后再丰富：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 超能力类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Power</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 能力值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> $ability;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 能力范围或距离</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> $range;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($ability, $range)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;ability = $ability;</span><br><span class="line"><span class="keyword">$this</span>-&gt;range = $range;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候我们回过头，修改一下之前的<strong>超人</strong>类，让一个<strong>超人</strong>创建的时候被赋予一个超能力：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 超人类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Superman</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">protected</span> $power;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;power = <span class="keyword">new</span> Power(<span class="number">999</span>, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的话，当我们创建一个“超人”实例的时候，同时也创建了一个“超能力”的实例，但是，我们看到了一点，“超人”和“超能力”之间不可避免的产生了一个依赖。</p><blockquote><p>所谓“依赖”，就是 “我若依赖你，我就不能离开你，你一旦离开我就报错了”。</p></blockquote><p>在一个贯彻面向对象编程的项目中，这样的依赖随处可见。少量的依赖并不会有太过直观的影响，我们随着这个例子逐渐铺开，让大家慢慢意识到，当依赖达到一个量级时，是怎样一番噩梦般的体验。当然，我也会自然而然的讲述如何解决问题。</p><h2 id="可怕的依赖——一堆乱麻"><a href="#可怕的依赖——一堆乱麻" class="headerlink" title="可怕的依赖——一堆乱麻"></a>可怕的依赖——一堆乱麻</h2><p>之前的例子中，超能力类实例化后是一个具体的超能力，但是我们知道，超人的超能力是多元化的，每种超能力的方法、属性都有不小的差异，没法通过一种类描述完全。我们现在进行修改，我们假设超人可以有以下多种超能力：</p><ul><li>飞行，属性有：飞行速度、持续飞行时间</li><li>蛮力，属性有：力量值</li><li>能量弹，属性有：伤害值、射击距离、同时射击个数</li></ul><p>我们创建了如下类：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 飞行超能力类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flight</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">protected</span> $speed;<span class="comment">// 飞行速度</span></span><br><span class="line"><span class="keyword">protected</span> $holdtime;<span class="comment">// 持续飞行时间</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($speed, $holdtime)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 蛮力超能力类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Force</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">protected</span> $force;<span class="comment">// 力量值</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($force)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 能量弹能力类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shot</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">protected</span> $atk;<span class="comment">// 伤害值</span></span><br><span class="line"><span class="keyword">protected</span> $range;<span class="comment">// 射击距离</span></span><br><span class="line"><span class="keyword">protected</span> $limit;<span class="comment">// 同时射击个数</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($atk, $range, $limit)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>为了省事儿我没有详细写出 <code>__construct()</code> 这个构造函数的全部，只写了需要传递的参数。</p></blockquote><p>好了，这下我们的超人有点“忙”了。在超人初始化的时候，我们会根据需要来实例化其拥有的超能力吗，大致如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 超人类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Superman</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">protected</span> $power;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;power = <span class="keyword">new</span> Fight(<span class="number">9</span>, <span class="number">100</span>);<span class="comment">// 需要飞行超能力</span></span><br><span class="line"><span class="comment">// $this-&gt;power = new Force(45);// 需要蛮力超能力</span></span><br><span class="line"><span class="comment">// $this-&gt;power = new Shot(99, 50, 2);// 需要能量弹超能力</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">$this-&gt;power = array(// 需要同时拥有多种超能力</span></span><br><span class="line"><span class="comment">new Force(45),</span></span><br><span class="line"><span class="comment">new Shot(99, 50, 2)</span></span><br><span class="line"><span class="comment">);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们需要自己手动的在构造函数内（或者其他方法里）实例化一系列需要的类，这样并不好。可以想象，假如需求变更（不同的怪物横行地球），需要更多的有针对性的 <strong>新的</strong> 超能力，或者需要 <strong>变更</strong> 超能力的方法，我们必须 <strong>重新改造</strong> 超人。<strong>换句话说就是，改变超能力的同时，我还得重新制造个超人</strong>。效率太低了！新超人还没创造完成世界早已被毁灭。</p><blockquote><p>这时，灵机一动的人想到：为什么不可以这样呢？超人的能力可以被随时更换，只需要添加或者更新一个芯片或者其他装置啥的（想到钢铁侠没）。这样的话就不要整个重新来过了。</p></blockquote><p>我们不应该手动在 “超人” 类中固化了他的 “超能力” 初始化的行为，而转由外部负责，由外部创造超能力模组、装置或者芯片等（我们后面统一称为 “模组”），植入超人体内的某一个接口，这个接口是一个既定的，只要这个 “模组” 满足这个接口的装置都可以被超人所利用，可以提升、增加超人的某一种能力。这种由外部负责其依赖需求的行为，我们可以称其为 “<strong>控制反转（IoC）</strong>”。</p><h2 id="依赖转移——工厂模式"><a href="#依赖转移——工厂模式" class="headerlink" title="依赖转移——工厂模式"></a>依赖转移——工厂模式</h2><p>当然，实现控制反转的方法有几种。在这之前，不如我们先了解一些好玩的东西。</p><blockquote><p>我们可以想到，组件、工具（或者超人的模组），是一种可被生产的玩意儿，生产的地方当然是 “工厂（Factory）”，于是有人就提出了这样一种模式： <strong>工厂模式</strong>。</p></blockquote><p>工厂模式，顾名思义，就是一个类所依赖的外部事物的实例，都可以被一个或多个 “工厂” 创建的这样一种开发模式，就是 “<strong>工厂模式</strong>”。</p><p>我们为了给超人制造超能力模组，我们创建了一个工厂，它可以制造各种各样的模组，且仅需要通过一个方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 超能力生产工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PowerModuleFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">makeModule</span><span class="params">($moduleName, $options)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> ($moduleName) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'Fight'</span>: <span class="keyword">return</span> <span class="keyword">new</span> Fight($options[<span class="number">0</span>], $options[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">case</span> <span class="string">'Force'</span>: <span class="keyword">return</span> <span class="keyword">new</span> Force($options[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">case</span> <span class="string">'Shot'</span>: <span class="keyword">return</span> <span class="keyword">new</span> Shot($options[<span class="number">0</span>], $options[<span class="number">1</span>], $options[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候，超人 创建之初就可以使用这个工厂！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 超人类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Superman</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">protected</span> $power;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 初始化工厂</span></span><br><span class="line">$factory = <span class="keyword">new</span> PowerModuleFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过工厂提供的方法制造需要的模块</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;power = $factory-&gt;makeModule(<span class="string">'Fight'</span>, [<span class="number">9</span>, <span class="number">100</span>]);<span class="comment">// 需要飞行超能力</span></span><br><span class="line"><span class="comment">// $this-&gt;power = $factory-&gt;makeModule('Force', [45]);// 需要蛮力超能力</span></span><br><span class="line"><span class="comment">// $this-&gt;power = $factory-&gt;makeModule('Shot', [99, 50, 2]);// 需要能量弹超能力</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">$this-&gt;power = array(// 需要同时拥有多种超能力</span></span><br><span class="line"><span class="comment">$factory-&gt;makeModule('Force', [45]),</span></span><br><span class="line"><span class="comment">$factory-&gt;makeModule('Shot', [99, 50, 2])</span></span><br><span class="line"><span class="comment">);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看得出，我们不再需要在超人初始化之初，去初始化许多第三方类，只需初始化一个工厂类，即可满足需求。但这样似乎和以前区别不大，只是没有那么多 <code>new</code> 关键字。其实我们稍微改造一下这个类，你就明白，工厂类的真正意义和价值了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 超人类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Superman</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">protected</span> $power;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(array $modules)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 初始化工厂</span></span><br><span class="line">$factory = <span class="keyword">new</span> PowerModuleFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过工厂提供的方法制造需要的模块</span></span><br><span class="line"><span class="keyword">foreach</span> ($modules <span class="keyword">as</span> $moduleName =&gt; $moduleOptions) &#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;power[] = $factory-&gt;makeModule($moduleName, $moduleOptions);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建超人</span></span><br><span class="line">$superman = <span class="keyword">new</span> Superman([</span><br><span class="line"><span class="string">'Fight'</span> =&gt; [<span class="number">9</span>, <span class="number">100</span>], </span><br><span class="line"><span class="string">'Shot'</span> =&gt; [<span class="number">99</span>, <span class="number">50</span>, <span class="number">2</span>]</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>现在修改的结果令人满意。现在，“超人” 的创建不再依赖任何一个 “超能力” 的类，我们如若修改了或者增加了新的超能力，只需要针对修改 <code>PowerModuleFactory</code> 即可。扩充超能力的同时不再需要重新编辑超人的类文件，使得我们变得很轻松。但是，这才刚刚开始。</p><h2 id="再进一步！IoC-容器的重要组成-——-依赖注入！"><a href="#再进一步！IoC-容器的重要组成-——-依赖注入！" class="headerlink" title="再进一步！IoC 容器的重要组成 —— 依赖注入！"></a>再进一步！IoC 容器的重要组成 —— 依赖注入！</h2><p>由 “超人” 对 “超能力” 的依赖变成 “超人” 对 “超能力模组工厂” 的依赖后，对付小怪兽们变得更加得心应手。但这也正如你所看到的，依赖并未解除，只是由原来对多个外部的依赖变成了对一个 “工厂” 的依赖。假如工厂出了点麻烦，问题变得就很棘手。</p><blockquote><p>其实大多数情况下，工厂模式已经足够了。工厂模式的缺点就是：接口未知（即没有一个很好的契约模型，关于这个我马上会有解释）、产生对象类型单一。总之就是，还是不够灵活。虽然如此，工厂模式依旧十分优秀，并且适用于绝大多数情况。不过我们为了讲解后面的 <strong>依赖注入</strong> ，这里就先夸大一下工厂模式的缺陷咯。</p></blockquote><p>我们知道，超人依赖的模组，我们要求有统一的接口，这样才能和超人身上的注入接口对接，最终起到提升超能力的效果。</p><p>事实上，我之前说谎了，不仅仅只有一堆小怪兽，还有更多的大怪兽。嘿嘿。额，这时候似乎工厂的生产能力显得有些不足 —— 由于工厂模式下，所有的模组都已经在工厂类中安排好了，如果有新的、高级的模组加入，我们必须修改工厂类（好比增加新的生产线）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 超能力生产工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PowerModuleFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">makeModule</span><span class="params">($moduleName, $options)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> ($moduleName) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'Fight'</span>: <span class="keyword">return</span> <span class="keyword">new</span> Fight($options[<span class="number">0</span>], $options[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">case</span> <span class="string">'Force'</span>: <span class="keyword">return</span> <span class="keyword">new</span> Force($options[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">case</span> <span class="string">'Shot'</span>: <span class="keyword">return</span> <span class="keyword">new</span> Shot($options[<span class="number">0</span>], $options[<span class="number">1</span>], $options[<span class="number">2</span>]);</span><br><span class="line"><span class="comment">// case 'more': .......</span></span><br><span class="line"><span class="comment">// case 'and more': .......</span></span><br><span class="line"><span class="comment">// case 'and more': .......</span></span><br><span class="line"><span class="comment">// case 'oh no! its too many!': .......</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到没。。。噩梦般的感受！</p><blockquote><p>其实灵感就差一步！你可能会想到更为灵活的办法！对，下一步就是我们今天的主要配角 —— DI （依赖注入）</p></blockquote><p>由于对超能力模组的需求不断增大，我们需要集合整个世界的高智商人才，一起解决问题，不应该仅仅只有几个工厂垄断负责。不过高智商人才们都非常自负，认为自己的想法是对的，创造出的超能力模组没有统一的接口，自然而然无法被正常使用。这时我们需要提出一种契约，这样无论是谁创造出的模组，都符合这样的接口，自然就可被正常使用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 超能力模组接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PowerModuleInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 超能力激活方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 任何一个超能力都得有该方法，并拥有一个参数</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@param</span> array $target 针对目标，可以是一个或多个，自己或他人</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">activate</span><span class="params">(array $target)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上文中，我们定下了一个接口 （超能力模组的规范、契约），所有被创造的模组必须遵守该规范，才能被生产。</p></blockquote><blockquote><p>其实，这就是 php 中 接口（ interface ） 的用处和意义！很多人觉得，为什么 php 需要接口这种东西？难道不是 java 、 C# 之类的语言才有的吗？这么说，只要是一个正常的面向对象编程语言（虽然 php 可以面向过程），都应该具备这一特性。因为一个 对象（object） 本身是由他的模板或者原型 —— 类 （class） ，经过实例化后产生的一个具体事物，而有时候，实现统一种方法且不同功能（或特性）的时候，会存在很多的类（class），这时候就需要有一个契约，让大家编写出可以被随时替换却不会产生影响的接口。这种由编程语言本身提出的硬性规范，会增加更多优秀的特性。</p></blockquote><blockquote><p>虽然有些绕，但通过我们接下来的实例，大家会慢慢领会接口带来的好处。</p></blockquote><p>这时候，那些提出更好的超能力模组的高智商人才，遵循这个接口，创建了下述（模组）类：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * X-超能量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XPower</span> <span class="keyword">implements</span> <span class="title">PowerModuleInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">activate</span><span class="params">(array $target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 这只是个例子。。具体自行脑补</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'X-超能量'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 终极炸弹 （就这么俗）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UltraBomb</span> <span class="keyword">implements</span> <span class="title">PowerModuleInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">activate</span><span class="params">(array $target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 这只是个例子。。具体自行脑补</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'终极炸弹'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时，为了防止有些 “砖家” 自作聪明，或者一些叛徒恶意捣蛋，不遵守契约胡乱制造模组，影响超人，我们对超人初始化的方法进行改造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 超人类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Superman</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">protected</span> $module;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PowerModuleInterface $module)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;module = $module;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;module-&gt;activate([]);<span class="comment">// 超能力激活</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改造完毕！现在，当我们初始化 “超人” 类的时候，提供的模组实例必须是一个 <code>PowerModuleInterface</code> 接口的实现。否则就会提示错误。</p><p>正是由于超人的创造变得容易，一个超人也就不需要太多的超能力，我们可以创造多个超人，并分别注入需要的超能力模组即可。这样的话，虽然一个超人只有一个超能力，但超人更容易变多，我们也不怕怪兽啦！</p><blockquote><p>现在有人疑惑了，你要讲的 依赖注入 呢？<br>其实，上面讲的内容，正是依赖注入。</p></blockquote><p>什么叫做 <strong>依赖注入</strong>？</p><p>本文从开头到现在提到的一系列依赖，只要不是由内部生产（比如初始化、构造函数 <code>__construct</code> 中通过工厂方法、自行手动 <code>new</code> 的），而是由外部以参数或其他形式注入的，都属于 <strong>依赖注入（DI）</strong> 。是不是豁然开朗？事实上，就是这么简单。下面就是一个典型的依赖注入：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 超能力模组</span></span><br><span class="line">$superModule = <span class="keyword">new</span> XPower;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化一个超人，并注入一个超能力模组依赖</span></span><br><span class="line">$superMan = <span class="keyword">new</span> Superman($superModule);</span><br></pre></td></tr></table></figure><p>关于依赖注入这个本文的主要配角，也就这么多需要讲的。理解了依赖注入，我们就可以继续深入问题。慢慢走近今天的主角……</p><h2 id="IoC-容器——更为先进的工厂"><a href="#IoC-容器——更为先进的工厂" class="headerlink" title="IoC 容器——更为先进的工厂"></a>IoC 容器——更为先进的工厂</h2><p>刚刚列了一段代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$superModule = <span class="keyword">new</span> XPower;</span><br><span class="line"></span><br><span class="line">$superMan = <span class="keyword">new</span> Superman($superModule);</span><br></pre></td></tr></table></figure><p>读者应该看出来了，手动的创建了一个超能力模组、手动的创建超人并注入了刚刚创建超能力模组。呵呵，手动。</p><blockquote><p>现代社会，应该是高效率的生产，干净的车间，完美的自动化装配。</p></blockquote><p>一群怪兽来了，如此低效率产出超人是不现实，我们需要自动化 —— 最多一条指令，千军万马来相见。我们需要一种高级的生产车间，我们只需要向生产车间提交一个脚本，工厂便能够通过指令自动化生产。这种更为高级的工厂，就是工厂模式的升华 —— <strong>IoC 容器</strong>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 容器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">protected</span> $binds;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> $instances;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bind</span><span class="params">($abstract, $concrete)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> ($concrete <span class="keyword">instanceof</span> Closure) &#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;binds[$abstract] = $concrete;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;instances[$abstract] = $concrete;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span><span class="params">($abstract, $parameters = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;instances[$abstract])) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;instances[$abstract];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">array_unshift($parameters, <span class="keyword">$this</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> call_user_func_array(<span class="keyword">$this</span>-&gt;binds[$abstract], $parameters);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候，一个十分粗糙的容器就诞生了。现在的确很简陋，但不妨碍我们进一步提升他。先着眼现在，看看这个容器如何使用吧！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个容器（后面称作超级工厂）</span></span><br><span class="line">$container = <span class="keyword">new</span> Container;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向该 超级工厂 添加 超人 的生产脚本</span></span><br><span class="line">$container-&gt;bind(<span class="string">'superman'</span>, <span class="function"><span class="keyword">function</span><span class="params">($container, $moduleName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Superman($container-&gt;make($moduleName));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向该 超级工厂 添加 超能力模组 的生产脚本</span></span><br><span class="line">$container-&gt;bind(<span class="string">'xpower'</span>, <span class="function"><span class="keyword">function</span><span class="params">($container)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> XPower;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同上</span></span><br><span class="line">$container-&gt;bind(<span class="string">'ultrabomb'</span>, <span class="function"><span class="keyword">function</span><span class="params">($container)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> UltraBomb;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ******************  华丽丽的分割线  **********************</span></span><br><span class="line"><span class="comment">// 开始启动生产</span></span><br><span class="line">$superman_1 = $container-&gt;make(<span class="string">'superman'</span>, [<span class="string">'xpower'</span>]);</span><br><span class="line">$superman_2 = $container-&gt;make(<span class="string">'superman'</span>, [<span class="string">'ultrabomb'</span>]);</span><br><span class="line">$superman_3 = $container-&gt;make(<span class="string">'superman'</span>, [<span class="string">'xpower'</span>]);</span><br><span class="line"><span class="comment">// ...随意添加</span></span><br></pre></td></tr></table></figure><p>看到没？通过最初的 <strong>绑定（bind）</strong> 操作，我们向 超级工厂 注册了一些生产脚本，这些生产脚本在生产指令下达之时便会执行。发现没有？我们彻底的解除了 超人 与 超能力模组 的依赖关系，更重要的是，容器类也丝毫没有和他们产生任何依赖！我们通过注册、绑定的方式向容器中添加一段可以被执行的回调（可以是匿名函数、非匿名函数、类的方法）作为生产一个类的实例的 <strong>脚本</strong> ，只有在真正的 <strong>生产（make）</strong> 操作被调用执行时，才会触发。</p><p>这样一种方式，使得我们更容易在创建一个实例的同时解决其依赖关系，并且更加灵活。当有新的需求，只需另外绑定一个“生产脚本”即可。</p><blockquote><p>实际上，真正的 IoC 容器更为高级。我们现在的例子中，还是需要手动提供超人所需要的模组参数，但真正的 IoC 容器会根据类的依赖需求，自动在注册、绑定的一堆实例中搜寻符合的依赖需求，并自动注入到构造函数参数中去。Laravel 框架的服务容器正是这么做的。实现这种功能其实理论上并不麻烦，但我并不会在本文中写出，因为……我懒得写。</p></blockquote><blockquote><p>不过我告诉大家，这种自动搜寻依赖需求的功能，是通过 <a href="http://php.net/manual/zh/book.reflection.php" target="_blank" rel="noopener">反射（Reflection）</a> 实现的，恰好的，php 完美的支持反射机制！关于反射，php 官方文档有详细的资料，并且中文翻译基本覆盖，足够学习和研究！</p></blockquote><p>现在，到目前为止，我们已经不再惧怕怪兽们了。高智商人才集思广益，井井有条，根据接口契约创造规范的超能力模组。超人开始批量产出。最终，人人都是超人，你也可以是哦 :stuck_out_tongue_closed_eyes:！</p><h2 id="回归正常世界-我们开始重新审视-laravel-的核心"><a href="#回归正常世界-我们开始重新审视-laravel-的核心" class="headerlink" title="回归正常世界,我们开始重新审视 laravel 的核心"></a>回归正常世界,我们开始重新审视 laravel 的核心</h2><p>现在，我们开始慢慢解读 laravel 的核心。其实，laravel 的核心就是一个 IoC 容器，也恰好是我之前所说的高级的 IoC 容器。</p><p>可以说，laravel 的核心本身十分轻量，并没有什么很神奇很实质性的应用功能。很多人用到的各种功能模块比如 <strong>Route（路由）</strong>、<strong>Eloquent ORM（数据库 ORM 组件）</strong>、<strong>Request and Response（请求和响应）</strong>等等等等，实际上都是与核心无关的类模块提供的，这些类从注册到实例化，最终被你所使用，其实都是 laravel 的服务容器负责的。</p><p>我们以大家最常见的 Route 类作为例子。大家可能经常见到路由定义是这样的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// bla bla bla...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>实际上， <code>Route</code> 类被定义在这个命名空间：<code>Illuminate\Routing\Router</code>，文件 <code>vendor/laravel/framework/src/Illuminate/Routing/Router.php</code>。<br>我们通过打开发现，这个类的这一系列方法，如 <code>get</code>，<code>post</code>，<code>any</code> 等都不是<strong>静态（static）</strong>方法，这是怎么一回事儿？不要急，我们继续。</p><h2 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h2><p>我们在前文介绍 IoC 容器的部分中，提到了，一个类需要绑定、注册至容器中，才能被“制造”。</p><p>对，一个类要被容器所能够提取，必须要先注册至这个容器。既然 laravel 称这个容器叫做服务容器，那么我们需要某个服务，就得先注册、绑定这个服务到容器，那么提供服务并绑定服务至容器的东西，就是 <strong>服务提供者（ServiceProvider）</strong>。</p><blockquote><p>虽然，绑定一个类到容器不一定非要通过 <strong>服务提供者（ServiceProvider）</strong> 。</p></blockquote><blockquote><p>但是，我们知道，有时候我们的类、模块会有需要其他类和组件的情况，为了保证初始化阶段不会出现所需要的模块和组件没有注册的情况，laravel 将注册和初始化行为进行拆分，注册的时候就只能注册，初始化的时候就是初始化。拆分后的产物就是现在的 <strong>服务提供者</strong>。</p></blockquote><p>服务提供者主要分为两个部分，<strong>register（注册）</strong> 和 <strong>boot（引导、初始化）</strong>，具体参考文档。<code>register</code> 负责进行向容器注册“脚本”，但要注意注册部分不要有对未知事物的依赖，如果有，就要移步至 <code>boot</code> 部分。</p><h2 id="Facade"><a href="#Facade" class="headerlink" title="Facade"></a>Facade</h2><p>我们现在解答之前关于 <code>Route</code> 的方法为何能以静态方法访问的问题。实际上这个问题文档上有写，简单说来就是模拟一个类，提供一个静态魔术方法<code>__callStatic</code>，并将该静态方法映射到真正的方法上。</p><p>我们使用的 <code>Route</code> 类实际上是 <code>Illuminate\Support\Facades\Route</code> 通过 <code>class_alias()</code> 函数创造的 别名 而已，这个类被定义在文件 <code>vendor/laravel/framework/src/Illuminate/Support/Facades/Route.php</code> 。</p><p>我们打开文件一看……诶？怎么只有这么简单的一段代码呢？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> \Illuminate\Routing\Router</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Route</span> <span class="keyword">extends</span> <span class="title">Facade</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get the registered name of the component.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFacadeAccessor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'router'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实仔细看，会发现这个类继承了一个叫做 Facade 的类，到这里谜底差不多要解开了。</p><p>上述简单的定义中，我们看到了 <code>getFacadeAccessor</code> 方法返回了一个 <code>route</code>，这是什么意思呢？事实上，这个值被一个 <code>ServiceProvider</code> 注册过，大家应该知道注册了个什么，当然是那个真正的路由类！</p><blockquote><p>有人会问，Facade 是怎么实现的。我并不想说得太细，一个是我懒，另一个原因就是，自己发现一些东西更容易理解，并不容易忘记。很多细节我已经说了，建议大家自行去研究。</p></blockquote><p>至此，我们已经讲的差不多了。</p><h2 id="和平！我们该总结总结了！"><a href="#和平！我们该总结总结了！" class="headerlink" title="和平！我们该总结总结了！"></a>和平！我们该总结总结了！</h2><p>无论如何，世界和平了。</p><p>这里要总结的内容就是，其实很多事情并不复杂，怕的是复杂的理论内容。我觉得很多东西一旦想通也就那么回事儿。很多人觉得 laravel 这不好那不好、这里难哪里难，我只能说，laravel 的确不是一流和优秀的框架，说 laravel 是一流、优秀的框架的人，不是 laravel 的粉丝那么就是跟风炒作。Laravel 最大的特点和优秀之处就是使用了很多 php 比较新（实际上并不新）的概念和技术（也就一堆语法糖）而已。因此 laravel 的确符合一个适宜学习的框架。Laravel 的构思的确和其他框架有很大不同，这也要求学习他的人必须熟练 php，并 基础扎实！如果你觉得学 laravel 框架十分困难，那么原因只有一个：你 php 基础不好。</p><p>另外，善于利用命名空间和面向对象的诸多特性，去追寻一些东西，你会发现，原来这一切这么容易。</p><h2 id="最后在通过名词解释回味一下吧"><a href="#最后在通过名词解释回味一下吧" class="headerlink" title="最后在通过名词解释回味一下吧"></a>最后在通过名词解释回味一下吧</h2><h3 id="容器（Container）"><a href="#容器（Container）" class="headerlink" title="容器（Container）"></a>容器（Container）</h3><p>在编程语境中，容器是一个存储和管理对象实例及其依赖关系的实体。它通常提供了一个统一的接口来获取所需的对象，而无需关心对象的创建细节。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $bindings;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bind</span><span class="params">($name, Closure $closure)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;bindings[$name] = $closure;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">resolve</span><span class="params">($name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;bindings[$name])) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BindingResolutionException(<span class="string">"Unresolvable binding &#123;$name&#125;."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;bindings[$name]();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个容器类允许开发者绑定一个名称与闭包（用于生成对象）的关系，并可以通过名称解析出对象实例。</p><h3 id="依赖注入（Dependency-Injection）"><a href="#依赖注入（Dependency-Injection）" class="headerlink" title="依赖注入（Dependency Injection）"></a>依赖注入（Dependency Injection）</h3><p>依赖注入是一种设计模式，用于实现应用程序组件之间的解耦。通过依赖注入，组件不需要直接创建或查找其依赖项，而是从外部接收它们。这通常通过构造函数、方法参数或属性设置器来实现。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($userRepository)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;userRepository = $userRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUser</span><span class="params">($id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;userRepository-&gt;find($id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>UserService</code> 类不直接创建 <code>userRepository</code>，而是通过构造函数接收一个 <code>userRepository</code> 的实例。</p><h3 id="控制反转（Inversion-of-Control-IoC）"><a href="#控制反转（Inversion-of-Control-IoC）" class="headerlink" title="控制反转（Inversion of Control, IoC）"></a>控制反转（Inversion of Control, IoC）</h3><p>控制反转是一种原则，它指的是将流程控制的责任从应用程序代码转移到外部框架或库。在实践中，这通常意味着应用程序中的组件不再负责管理它们的依赖关系，而是交给容器或框架来处理。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$container = <span class="keyword">new</span> Container();</span><br><span class="line">$container-&gt;bind(<span class="string">'userRepository'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> UserRepository();</span><br><span class="line">&#125;);</span><br><span class="line">$container-&gt;bind(<span class="string">'userService'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> <span class="title">use</span> <span class="params">($container)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> UserService($container-&gt;resolve(<span class="string">'userRepository'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$userService = $container-&gt;resolve(<span class="string">'userService'</span>);</span><br></pre></td></tr></table></figure><p>这里，<code>UserService</code> 的依赖 <code>UserRepository</code> 不是由 <code>UserService</code> 自己创建的，而是由容器在外部创建并注入的。这就是控制反转的一个例子，因为 <code>UserService</code> 的控制流被反转给了容器。</p><p>转载 [<a href="https://www.insp.top/article/learn-laravel-container" target="_blank" rel="noopener">laravel 学习笔记 —— 神奇的服务容器</a>]。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;名词解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IoC：Inversion of Control（控制反转）&lt;/li&gt;
&lt;li&gt;DI：Dependency Injection（依赖注入）&lt;/li&gt;
&lt;li&gt;容器：Container&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Laravel框架可能是PHP开发者最常用的框架之一，它的核心就是一个&lt;strong&gt;IoC容器&lt;/strong&gt;，根据文档称其为&lt;strong&gt;服务容器&lt;/strong&gt;，顾名思义该容器提供了整个框架中需要的一系列服务。作为初学者很多人会在这一个概念上犯难，因此我们可以从一些基础的内容开始讲解，通过理解面向对象开发中依赖的生产和解决方法，来逐步揭开“依赖注入”的面纱，逐渐理解这一神奇的设计理念。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://xinyufeng.net/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://xinyufeng.net/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Web开发中的网络安全: 常见攻击及防范策略</title>
    <link href="https://xinyufeng.net/2024/04/26/Web%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8-%E5%B8%B8%E8%A7%81%E6%94%BB%E5%87%BB%E5%8F%8A%E9%98%B2%E8%8C%83%E7%AD%96%E7%95%A5/"/>
    <id>https://xinyufeng.net/2024/04/26/Web开发中的网络安全-常见攻击及防范策略/</id>
    <published>2024-04-26T01:15:06.000Z</published>
    <updated>2024-04-26T07:04:24.738Z</updated>
    
    <content type="html"><![CDATA[<p>在Web开发的世界里，网络攻击是一种常见且潜在的威胁。理解这些攻击如何运作并采取措施防范它们对于构建安全的Web应用至关重要。本文将介绍几种常见的Web攻击，提供防范策略，并以实例说明如何防止这些攻击。</p><a id="more"></a><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><p><strong>概要:</strong></p><p>SQL注入攻击是攻击者在Web表单输入或URL查询参数中插入恶意的SQL语句，旨在操作后端数据库。</p><p><strong>实例:</strong></p><p>假设一个网站的登录URL是<code>http://example.com/login?username=user&amp;password=pass</code>，<br>如果攻击者更改此URL为<code>http://example.com/login?username=admin&#39;%20--%20&amp;password=aabb</code>, 并且应用程序没有将输入作为字符串处理，<br>则会执行<code>SELECT * FROM users WHERE username=&#39;admin&#39; -- &#39; AND password=&#39;aabb&#39;</code>，<br>由于<code>--</code>注释了后面的SQL语句，所以最终SQL语句为<code>SELECT * FROM users WHERE username=&#39;admin&#39;</code>，<br>那么这个SQL注入就会绕过身份验证。</p><p><strong>防范策略:</strong></p><ol><li><strong>使用参数化查询</strong>：使用参数化查询可以有效防止SQL注入攻击，因为参数化查询会将用户输入的数据作为参数传递，而不是直接拼接到SQL语句中。</li><li><strong>输入验证和过滤</strong>：对用户输入的数据进行验证和过滤，确保只接受符合预期格式的数据。</li><li><strong>最小权限原则</strong>：数据库用户应该以最小权限原则进行配置，即给予应用程序访问数据库的最小权限，避免过高的权限级别。</li><li><strong>错误消息处理</strong>：避免将数据库错误信息直接暴露给用户，这可能会泄露敏感信息给攻击者。</li><li><strong>定期更新和监控</strong>：定期更新数据库和应用程序，监控数据库操作日志，及时发现异常操作。</li></ol><h2 id="跨站脚本攻击（XSS）"><a href="#跨站脚本攻击（XSS）" class="headerlink" title="跨站脚本攻击（XSS）"></a>跨站脚本攻击（XSS）</h2><p><strong>概要:</strong></p><p>跨站脚本攻击（XSS）是一种利用Web应用漏洞将恶意代码注入到Web页面上的攻击。攻击者可以利用XSS漏洞将恶意代码注入到Web页面中，然后通过用户点击链接或打开特殊链接来执行恶意代码。</p><p><strong>实例:</strong></p><p>假设一个网站有一个评论功能，用户可以输入评论内容，然后评论内容会显示在页面上。如果攻击者将恶意代码（例如<code>&lt;script&gt;alert(&#39;XSS&#39;);&lt;/script&gt;</code>）注入到评论内容中，<br>当其他用户查看这条评论时，这段脚本会在他们的浏览器上执行，从而窃取用户信息或执行其他恶意操作。</p><p><strong>防范策略:</strong></p><ol><li><strong>输入验证和过滤</strong>：对用户输入的数据进行验证和过滤，确保只接受符合预期格式的数据。</li><li><strong>输出编码</strong>：对输出数据进行编码，以防止攻击者通过编码方式注入恶意代码。</li><li><strong>白名单过滤</strong>：使用白名单过滤，只允许指定的HTML标签和属性，防止攻击者通过非法标签或属性注入恶意代码。</li><li><strong>严格Content-Security-Policy（CSP）</strong>：使用CSP来限制页面加载的资源，防止攻击者通过非法资源注入恶意代码。</li><li><strong>定期更新和监控</strong>：定期更新Web应用和浏览器，监控Web应用和浏览器的日志，及时发现异常操作。</li></ol><h2 id="跨站请求伪造（CSRF）"><a href="#跨站请求伪造（CSRF）" class="headerlink" title="跨站请求伪造（CSRF）"></a>跨站请求伪造（CSRF）</h2><p><strong>概要:</strong></p><p>跨站请求伪造（CSRF）是一种利用Web应用漏洞将恶意请求注入到Web页面上的攻击。攻击者可以利用CSRF漏洞将恶意请求注入到Web页面中，然后通过用户点击链接或打开特殊链接来执行恶意请求。</p><p><strong>实例:</strong></p><p>用户登录到他们的银行账户，并在另一个标签页打开了一个看似无害的网站。这个网站包含了一个看不见的表单，自动提交转账到攻击者账户的请求。由于用户已经登录，请求带有有效的认证，所以转账得以执行。</p><p><strong>防范策略:</strong></p><ol><li><strong>验证来源</strong>：在请求中验证来源，确保请求来自受信任的来源。</li><li><strong>使用CSRF令牌</strong>：在每个请求中包含一个唯一的CSRF令牌，并在服务器端验证令牌。</li><li><strong>使用同源策略和CORS</strong>：使用同源策略和CORS来限制跨域请求，防止攻击者通过非法请求注入请求。</li><li><strong>严格Content-Security-Policy（CSP）</strong>：使用CSP来限制页面加载的资源，防止攻击者通过非法资源注入请求。</li><li><strong>定期更新和监控</strong>：定期更新Web应用和浏览器，监控Web应用和浏览器的日志，及时发现异常操作。</li></ol><h2 id="拒绝服务攻击（DoS）"><a href="#拒绝服务攻击（DoS）" class="headerlink" title="拒绝服务攻击（DoS）"></a>拒绝服务攻击（DoS）</h2><p><strong>概要:</strong></p><p>拒绝服务攻击（DoS）是一种利用Web应用漏洞将服务器或网络资源耗尽的攻击。攻击者可以利用DoS漏洞将服务器或网络资源耗尽，导致服务不可用或拒绝服务。</p><p><strong>实例:</strong></p><p>假设一个网站有一个评论功能，用户可以输入评论内容，然后评论内容会显示在页面上。如果攻击者将大量的恶意请求注入到评论功能中，<br>当服务器或网络资源耗尽时，攻击者可以导致服务器或网络资源耗尽，从而导致服务不可用或拒绝服务。</p><p><strong>防范策略:</strong></p><ol><li><strong>负载均衡</strong>：使用负载均衡来分散请求，防止单个服务器或网络资源耗尽。</li><li><strong>流量控制</strong>：使用流量控制来限制请求的速率，防止单个服务器或网络资源耗尽。</li><li><strong>采用云防御服务</strong>：使用云防御服务来保护Web应用，例如AWS Shield、Cloudflare、阿里云的云盾等。</li><li><strong>定时更新和监控</strong>：定期更新Web应用和浏览器，监控Web应用和浏览器的日志，及时发现异常操作。</li></ol><h2 id="本地文件包含（LFI）"><a href="#本地文件包含（LFI）" class="headerlink" title="本地文件包含（LFI）"></a>本地文件包含（LFI）</h2><p><strong>概要:</strong></p><p>本地文件包含攻击发生在应用程序包含动态文件时，但没有适当验证用户的输入。</p><p><strong>实例:</strong></p><p>网站URL如<code>http://example.com/index.php?page=about</code>用于动态加载页面内容。攻击者可以通过更改URL为<code>http://example.com/index.php?page=../../../../etc/passwd</code>来尝试访问敏感的服务器文件。</p><p><strong>防范策略:</strong></p><ol><li><strong>输入验证和过滤</strong>：对用户输入的数据进行验证和过滤，确保只接受符合预期格式的数据。</li><li><strong>白名单过滤</strong>：使用白名单过滤，只允许指定的文件类型，防止攻击者通过非法文件类型注入恶意代码。</li><li><strong>限制文件包含函数只能加载特定目录下的文件</strong>：使用限制文件包含函数只能加载特定目录下的文件，防止攻击者通过非法文件路径注入恶意代码。</li><li><strong>禁用不必要的PHP功能</strong>：例如eval()函数，防止攻击者通过非法函数注入恶意代码。</li></ol><h2 id="DNS劫持"><a href="#DNS劫持" class="headerlink" title="DNS劫持"></a>DNS劫持</h2><p><strong>概要:</strong></p><p>DNS劫持攻击发生在DNS服务器被攻击时，攻击者可以劫持DNS服务器，将用户指向恶意网站。</p><p><strong>实例:</strong></p><p>假设DNS服务器被攻击，攻击者可以劫持DNS服务器，将用户指向恶意网站。</p><p><strong>防范策略:</strong></p><ol><li><strong>定期更新DNS服务器</strong>：定期更新DNS服务器，确保DNS服务器的配置正确。</li><li><strong>使用DNS缓存</strong>：使用DNS缓存，防止攻击者通过DNS劫持攻击。</li><li><strong>使用DNSSEC</strong>：使用DNSSEC，防止攻击者通过DNS劫持攻击。</li><li><strong>定期更新和监控</strong>：定期更新DNS服务器和DNSSEC，监控DNS服务器的日志，及时发现异常操作。</li></ol><p>Web安全不是一个一次性的任务，而是一个持续的过程。通过理解各种Web攻击，实施合适的防御措施，并定期进行安全审计，你将能够建立一个更加安全的网络环境。开发人员、系统管理员和所有IT专业人员都应致力于提高他们的网络安全知识，以营造一个更为安全的网络空间。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Web开发的世界里，网络攻击是一种常见且潜在的威胁。理解这些攻击如何运作并采取措施防范它们对于构建安全的Web应用至关重要。本文将介绍几种常见的Web攻击，提供防范策略，并以实例说明如何防止这些攻击。&lt;/p&gt;
    
    </summary>
    
      <category term="网络安全" scheme="https://xinyufeng.net/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络攻击" scheme="https://xinyufeng.net/tags/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB/"/>
    
  </entry>
  
  <entry>
    <title>相同地域云服务器间内网通信配置</title>
    <link href="https://xinyufeng.net/2024/04/08/%E7%9B%B8%E5%90%8C%E5%9C%B0%E5%9F%9F%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%97%B4%E5%86%85%E7%BD%91%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/"/>
    <id>https://xinyufeng.net/2024/04/08/相同地域云服务器间内网通信配置/</id>
    <published>2024-04-08T00:48:56.000Z</published>
    <updated>2024-04-08T01:24:47.757Z</updated>
    
    <content type="html"><![CDATA[<p>我们以阿里云云服务器为例，实现相同地域两台服务器间内网链接MySQL数据库。</p><p>服务器A：内网IP：10.10.10.100，并搭建MySQL数据库。<br>服务器B：内网IP：10.10.10.101。</p><p>如果两台服务器网络是<strong>专有网络</strong>，则需要保证这两台服务器在<strong>同一个专有网络</strong>下，否则两台服务器无法互相访问，下面我们以在同一个专有网络为例。</p><h2 id="服务器间ping测试"><a href="#服务器间ping测试" class="headerlink" title="服务器间ping测试"></a>服务器间ping测试</h2><p>先登录服务器B命令行执行ping命令，查看是否可以访问服务器A</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ping 10.10.10.100 -c 3</span></span><br><span class="line">PING 10.25.0.70 (10.10.10.100) 56(84) bytes of data.</span><br><span class="line">64 bytes from 10.10.10.100: icmp_seq=1 ttl=64 time=2.74 ms</span><br><span class="line">64 bytes from 10.10.10.100: icmp_seq=2 ttl=64 time=2.66 ms</span><br><span class="line">64 bytes from 10.10.10.100: icmp_seq=3 ttl=64 time=2.66 ms</span><br></pre></td></tr></table></figure><p>如果访问失败，再次查看两台服务器网络环境是否一致。</p><h2 id="配置服务器安全组"><a href="#配置服务器安全组" class="headerlink" title="配置服务器安全组"></a>配置服务器安全组</h2><p>登录阿里云平台，在服务器所在的安全组配置访问规则</p><a id="more"></a><ul><li>协议类型：TCP</li><li>端口范围：3306/3306</li><li>授权对象: 10.10.10.101</li></ul><h2 id="配置服务器防火墙"><a href="#配置服务器防火墙" class="headerlink" title="配置服务器防火墙"></a>配置服务器防火墙</h2><p>在服务器A系统防火墙配置访问规则</p><ul><li>协议: TCP</li><li>端口: 3306</li><li>策略: 允许</li><li>来源: 10.10.10.101</li></ul><h2 id="数据库链接配置"><a href="#数据库链接配置" class="headerlink" title="数据库链接配置"></a>数据库链接配置</h2><p>原则上，我们一般不对外使用数据库的root账号</p><p>新建一个用户</p><ul><li>用户名: white（用户名随意定义）</li><li>主机: 10.10.10.101（服务器B的内网IP）</li><li>密码: 123456（密码随意定义）</li><li>确认密码: 123456</li></ul><p>给用户配置权限</p><p>为了配置权限，首先在服务器A的MySQL新建一个数据库，比如<code>common_db</code>，然后给新建的用户配置权限，选择数据库<code>common_db</code>，后面的权限自行配置。</p><h2 id="数据库链接"><a href="#数据库链接" class="headerlink" title="数据库链接"></a>数据库链接</h2><p>在服务器B命令行，执行命令链接数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysql -h10.10.10.100 -P3306 -uwhite -p</span></span><br><span class="line">Enter password:</span><br></pre></td></tr></table></figure><p>出现如下信息表示链接成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysql -h10.10.10.100 -P3306 -uwhite -p</span></span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 14</span><br><span class="line">Server version: 5.7.44-log Source distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">'help;'</span> or <span class="string">'\h'</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">'\c'</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p>查看所有数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| common_db            |</span><br><span class="line">+--------------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p>至此，我们实现了服务器间内网链接MySQL数据库。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们以阿里云云服务器为例，实现相同地域两台服务器间内网链接MySQL数据库。&lt;/p&gt;
&lt;p&gt;服务器A：内网IP：10.10.10.100，并搭建MySQL数据库。&lt;br&gt;服务器B：内网IP：10.10.10.101。&lt;/p&gt;
&lt;p&gt;如果两台服务器网络是&lt;strong&gt;专有网络&lt;/strong&gt;，则需要保证这两台服务器在&lt;strong&gt;同一个专有网络&lt;/strong&gt;下，否则两台服务器无法互相访问，下面我们以在同一个专有网络为例。&lt;/p&gt;
&lt;h2 id=&quot;服务器间ping测试&quot;&gt;&lt;a href=&quot;#服务器间ping测试&quot; class=&quot;headerlink&quot; title=&quot;服务器间ping测试&quot;&gt;&lt;/a&gt;服务器间ping测试&lt;/h2&gt;&lt;p&gt;先登录服务器B命令行执行ping命令，查看是否可以访问服务器A&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ping 10.10.10.100 -c 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PING 10.25.0.70 (10.10.10.100) 56(84) bytes of data.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64 bytes from 10.10.10.100: icmp_seq=1 ttl=64 time=2.74 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64 bytes from 10.10.10.100: icmp_seq=2 ttl=64 time=2.66 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64 bytes from 10.10.10.100: icmp_seq=3 ttl=64 time=2.66 ms&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果访问失败，再次查看两台服务器网络环境是否一致。&lt;/p&gt;
&lt;h2 id=&quot;配置服务器安全组&quot;&gt;&lt;a href=&quot;#配置服务器安全组&quot; class=&quot;headerlink&quot; title=&quot;配置服务器安全组&quot;&gt;&lt;/a&gt;配置服务器安全组&lt;/h2&gt;&lt;p&gt;登录阿里云平台，在服务器所在的安全组配置访问规则&lt;/p&gt;
    
    </summary>
    
      <category term="运维" scheme="https://xinyufeng.net/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="云服务器" scheme="https://xinyufeng.net/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="通信" scheme="https://xinyufeng.net/tags/%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>如何安装PHP扩展</title>
    <link href="https://xinyufeng.net/2023/07/12/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85PHP%E6%89%A9%E5%B1%95/"/>
    <id>https://xinyufeng.net/2023/07/12/如何安装PHP扩展/</id>
    <published>2023-07-12T08:38:25.000Z</published>
    <updated>2023-07-12T08:40:35.043Z</updated>
    
    <content type="html"><![CDATA[<p>PECL（PHP Extension Community Library）是 PHP 的扩展库，它提供了一些 PHP 扩展，可以增强 PHP 的功能。所有扩展包列表查询地址：<a href="https://pecl.php.net/package-stats.php" target="_blank" rel="noopener">https://pecl.php.net/package-stats.php</a></p><h2 id="Window-上安装PHP扩展"><a href="#Window-上安装PHP扩展" class="headerlink" title="Window 上安装PHP扩展"></a>Window 上安装PHP扩展</h2><p>在PECL上找到所需要的PHP扩展，点击有DLL标识的链接地址，进行对应PHP版本的资源下载，但是你需要注意以下几点问题：</p><ul><li>VC6 是运行于 Apache 服务器；</li><li>Thread safe（线程安全）是以模块形式运行在 Apache 上，如果你以 CGI 的模式运行 PHP，请选择非线程安全模式（non-thread safe）；</li><li>VC9 是运行于 IIS 服务器上；</li><li>下载完你需要的二进制包后，解压压缩包，将 php_mongodb.dll 文件添加到你的PHP扩展目录中（ext）。ext 目录通常在 PHP 安装目录下的 ext 目录。</li></ul><p>打开 php 配置文件 php.ini 添加以下配置：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extension=php扩展.dll</span><br></pre></td></tr></table></figure><p>重启服务器，通过浏览器访问phpinfo，如果安装成功，就会看到安装扩展的信息。</p><h2 id="Linux-上安装-PHP-扩展"><a href="#Linux-上安装-PHP-扩展" class="headerlink" title="Linux 上安装 PHP 扩展"></a>Linux 上安装 PHP 扩展</h2><h3 id="命令行安装"><a href="#命令行安装" class="headerlink" title="命令行安装"></a>命令行安装</h3><p>你可以在 Linux 中执行以下命令来安装 MongoDB 的 PHP 扩展驱动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pecl install mongodb</span><br></pre></td></tr></table></figure><p>使用php的pecl安装命令必须保证网络连接可用以及root权限。</p><h3 id="PECL包安装"><a href="#PECL包安装" class="headerlink" title="PECL包安装"></a>PECL包安装</h3><p>在PECL上找到所需要的PHP扩展，点击有.tgz标识的链接地址，进行对应PHP版本的资源下载。</p><p>已安装MongoDB扩展为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://pecl.php.net/get/mongodb-1.5.2.tgz</span><br><span class="line">$ cd /mongodb-1.5.2</span><br><span class="line">$ phpize</span><br><span class="line">$ ./configure</span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>如果你的 php 是自己编译的，则安装方法如下(假设是编译在 /usr/local/php目录中)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://pecl.php.net/get/mongodb-1.5.2.tgz</span><br><span class="line">$ cd /mongodb-1.5.2</span><br><span class="line">$ /usr/local/php/bin/phpize</span><br><span class="line">$ ./configure --with-php-config=/usr/local/php/bin/php-config</span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>安装成功后，会有类似以下安装目录信息输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Installing shared extensions:     /usr/lib/php/extensions/debug-non-zts-20151012/</span><br></pre></td></tr></table></figure><p>执行以上命令后，你需要修改php.ini文件，在 php.ini 文件中添加mongo配置，配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">extension_dir=/usr/lib/php/extensions/debug-non-zts-20151012/</span><br><span class="line">extension=mongodb.so</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>你需要指明 extension_dir 配置项的路径。</p><p>可以通过以下命令查看目录地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; $ php -i | grep extension_dir</span><br><span class="line">&gt;   extension_dir =&gt; /usr/lib/php/extensions/debug-non-zts-20151012 =&gt;</span><br><span class="line">&gt;                    /usr/lib/php/extensions/debug-non-zts-20151012</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="MAC-中安装-PHP扩展驱动"><a href="#MAC-中安装-PHP扩展驱动" class="headerlink" title="MAC 中安装 PHP扩展驱动"></a>MAC 中安装 PHP扩展驱动</h2><p>你可以使用 autoconf 安装 PHP 扩展驱动。</p><p>你可以使用 Xcode 安装 PHP 扩展驱动。</p><p>如果你使用 XAMPP，你可以使用以下命令安装 PHP 扩展驱动：</p><p>以安装MongoDB扩展为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /Applications/XAMPP/xamppfiles/bin/pecl install mongo</span><br></pre></td></tr></table></figure><p>如果以上命令在XMPP或者MAMP中不起作用，你需要在 Github上下载兼容的预编译包。</p><p>然后添加 extension=mongodb.so 配置到你的 php.ini 文件中。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PECL（PHP Extension Community Library）是 PHP 的扩展库，它提供了一些 PHP 扩展，可以增强 PHP 的功能。所有扩展包列表查询地址：&lt;a href=&quot;https://pecl.php.net/package-stats.php&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pecl.php.net/package-stats.php&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Window-上安装PHP扩展&quot;&gt;&lt;a href=&quot;#Window-上安装PHP扩展&quot; class=&quot;headerlink&quot; title=&quot;Window 上安装PHP扩展&quot;&gt;&lt;/a&gt;Window 上安装PHP扩展&lt;/h2&gt;&lt;p&gt;在PECL上找到所需要的PHP扩展，点击有DLL标识的链接地址，进行对应PHP版本的资源下载，但是你需要注意以下几点问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VC6 是运行于 Apache 服务器；&lt;/li&gt;
&lt;li&gt;Thread safe（线程安全）是以模块形式运行在 Apache 上，如果你以 CGI 的模式运行 PHP，请选择非线程安全模式（non-thread safe）；&lt;/li&gt;
&lt;li&gt;VC9 是运行于 IIS 服务器上；&lt;/li&gt;
&lt;li&gt;下载完你需要的二进制包后，解压压缩包，将 php_mongodb.dll 文件添加到你的PHP扩展目录中（ext）。ext 目录通常在 PHP 安装目录下的 ext 目录。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;打开 php 配置文件 php.ini 添加以下配置：&lt;/p&gt;
    
    </summary>
    
      <category term="后端开发" scheme="https://xinyufeng.net/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="PHP" scheme="https://xinyufeng.net/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/PHP/"/>
    
    
      <category term="PHP扩展" scheme="https://xinyufeng.net/tags/PHP%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>Redis、Memcached和MongoDB的区别和应用场景</title>
    <link href="https://xinyufeng.net/2023/07/06/Redis%E3%80%81Memcached%E5%92%8CMongoDB%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    <id>https://xinyufeng.net/2023/07/06/Redis、Memcached和MongoDB的区别和应用场景/</id>
    <published>2023-07-06T01:40:29.000Z</published>
    <updated>2023-07-06T02:18:02.246Z</updated>
    
    <content type="html"><![CDATA[<p>Redis、Memcached和MongoDB是三种常用的<em>NoSQL</em>数据库，它们各自有着不同的特点和应用场景。</p><p><strong>Redis</strong></p><p>Redis是一种基于<strong>内存</strong>的数据结构存储系统，它<strong>支持多种数据结构</strong>，包括字符串(String)、哈希表(Dict)、列表(List)、集合(Set)、有序集合(sorted set)和基数估算(HyperLogLog)。</p><p>Redis的主要特点是速度快，支持高并发读写操作，并且<strong>可以持久化数据</strong>。</p><a id="more"></a><p>Redis常用于需要快速读写的场景，如缓存、消息队列、计数器、会话管理等场景，以及实时数据分析和实时推荐系统。</p><p><strong>Memcached</strong></p><p>Memcached也是一种基于<strong>内存</strong>的缓存系统，但它相对于Redis来说功能较为简单，只<strong>支持简单的key-value类型(键值对存储)</strong>。它是一个分布式的缓存系统，可以将数据存储在多台服务器上。</p><p>Memcached的主要特点是速度快，<strong>不支持持久化</strong>，重启后数据会丢失，</p><p>Memcached适用于缓存数据和临时数据的场景，如网页缓存和数据分析,可以提高网站的访问速度和响应速度。</p><p><strong>MongoDB</strong></p><p>MongoDB是一种<strong>文档型</strong>数据库，它支持JSON格式的文档存储。</p><p>MongoDB的主要特点是灵活性强和可扩展性，支持复杂的查询操作和索引以及数据分析操作。</p><p>MongoDB适用于大规模数据存储和处理的场景，例如日志、社交媒体、大数据分析、物联网设备数据存储等。</p><p>总之，Redis、Memcached和MongoDB都有着不同的优势和应用场景，需要根据具体的业务需求来选择合适的数据库。如果需要快速读写操作和缓存数据，可以选择Redis或Memcached；如果需要灵活的查询操作和大规模数据处理，可以选择MongoDB。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Redis、Memcached和MongoDB是三种常用的&lt;em&gt;NoSQL&lt;/em&gt;数据库，它们各自有着不同的特点和应用场景。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Redis&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Redis是一种基于&lt;strong&gt;内存&lt;/strong&gt;的数据结构存储系统，它&lt;strong&gt;支持多种数据结构&lt;/strong&gt;，包括字符串(String)、哈希表(Dict)、列表(List)、集合(Set)、有序集合(sorted set)和基数估算(HyperLogLog)。&lt;/p&gt;
&lt;p&gt;Redis的主要特点是速度快，支持高并发读写操作，并且&lt;strong&gt;可以持久化数据&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://xinyufeng.net/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="NoSQL" scheme="https://xinyufeng.net/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/NoSQL/"/>
    
    
      <category term="NoSQL" scheme="https://xinyufeng.net/tags/NoSQL/"/>
    
      <category term="Redis" scheme="https://xinyufeng.net/tags/Redis/"/>
    
      <category term="Memcached" scheme="https://xinyufeng.net/tags/Memcached/"/>
    
      <category term="MongoDB" scheme="https://xinyufeng.net/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>在微信实现链接的分享</title>
    <link href="https://xinyufeng.net/2023/05/18/%E5%9C%A8%E5%BE%AE%E4%BF%A1%E5%AE%9E%E7%8E%B0%E9%93%BE%E6%8E%A5%E7%9A%84%E5%88%86%E4%BA%AB/"/>
    <id>https://xinyufeng.net/2023/05/18/在微信实现链接的分享/</id>
    <published>2023-05-18T05:28:31.000Z</published>
    <updated>2023-05-18T06:00:31.805Z</updated>
    
    <content type="html"><![CDATA[<p>微信分享会使用到微信JS-SDK，所以需要再微信公众号后台配置<strong>JS接口安全域名</strong></p><p>微信官方关于<a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html#112" target="_blank" rel="noopener">分享接口开发文档</a></p><p>实现代码如下：</p><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>微信分享<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../static/lib/jquery/1.12.4/jquery.min.js"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入jweixin js文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//res2.wx.qq.com/open/js/jweixin-1.6.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">getWxConfig</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 获取微信配置参数</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 当前网页的URL，不包含#及其后面部分，要注意当前URL一定是正确的且已经在 JS接口安全域名 配置过</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> url = <span class="built_in">window</span>.location.href.split(<span class="string">'#'</span>)[<span class="number">0</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                    type: <span class="string">"POST"</span>,</span></span><br><span class="line"><span class="javascript">                    url: <span class="string">"获取微信签名等其他配置参数的链接，自行处理"</span>,</span></span><br><span class="line"><span class="javascript">                    dataType: <span class="string">"json"</span>,</span></span><br><span class="line">                    data: &#123;url: url&#125;,</span><br><span class="line"><span class="javascript">                    success: <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line">                        if (response.errorCode == 0) &#123;</span><br><span class="line">                            resolve(response.data);</span><br><span class="line"><span class="javascript">                        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line">                            reject(response.msg);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line"><span class="javascript">                    error: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(e);</span></span><br><span class="line">                        reject(e.statusText);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">wxShare</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> res = <span class="keyword">await</span> getSignature();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> &#123;timestamp, nonceStr, appId, signature&#125; = res;</span></span><br><span class="line">            wx.config(&#123;</span><br><span class="line"><span class="javascript">                debug: <span class="literal">true</span>, <span class="comment">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></span></span><br><span class="line"><span class="javascript">                appId: appId, <span class="comment">// 必填，公众号的唯一标识</span></span></span><br><span class="line"><span class="javascript">                timestamp: timestamp, <span class="comment">// 必填，生成签名的时间戳</span></span></span><br><span class="line"><span class="javascript">                nonceStr: nonceStr, <span class="comment">// 必填，生成签名的随机串</span></span></span><br><span class="line"><span class="javascript">                signature: signature, <span class="comment">// 必填，签名</span></span></span><br><span class="line"><span class="javascript">                jsApiList: [<span class="string">"onMenuShareTimeline"</span>, <span class="string">"onMenuShareAppMessage"</span>] <span class="comment">// 必填，需要使用的JS接口列表</span></span></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">            wx.ready(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line">                wx.onMenuShareTimeline(&#123;</span><br><span class="line"><span class="javascript">                    title: <span class="string">'测试分享朋友圈'</span>, <span class="comment">// 分享标题</span></span></span><br><span class="line"><span class="javascript">                    link: url,<span class="comment">// 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span></span></span><br><span class="line"><span class="javascript">                    imgUrl: <span class="string">'logo.jpg'</span>,<span class="comment">// 分享图标</span></span></span><br><span class="line"><span class="javascript">                    success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 设置成功</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">'用户点击了分享后执行的回调函数1'</span>);</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                wx.onMenuShareAppMessage(&#123;</span><br><span class="line"><span class="javascript">                    title: <span class="string">'测试分享朋友'</span>, <span class="comment">// 分享标题</span></span></span><br><span class="line"><span class="javascript">                    desc: <span class="string">'一个测试的分享'</span>, <span class="comment">// 分享描述</span></span></span><br><span class="line"><span class="javascript">                    link: url, <span class="comment">// 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span></span></span><br><span class="line"><span class="javascript">                    imgUrl: <span class="string">'logo.jpg'</span>, <span class="comment">// 分享图标</span></span></span><br><span class="line"><span class="javascript">                    type: <span class="string">""</span>, <span class="comment">// 分享类型,music、video或link，不填默认为link</span></span></span><br><span class="line"><span class="javascript">                    dataUrl: <span class="string">""</span>, <span class="comment">// 如果type是music或video，则要提供数据链接，默认为空</span></span></span><br><span class="line"><span class="javascript">                    success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 设置成功</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">'用户点击了分享后执行的回调函数2'</span>);</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        wxShare();</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;微信分享会使用到微信JS-SDK，所以需要再微信公众号后台配置&lt;strong&gt;JS接口安全域名&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;微信官方关于&lt;a href=&quot;https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html#112&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;分享接口开发文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;实现代码如下：&lt;/p&gt;
    
    </summary>
    
      <category term="微信开发" scheme="https://xinyufeng.net/categories/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"/>
    
      <category term="微信公众号" scheme="https://xinyufeng.net/categories/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
    
      <category term="微信公众号" scheme="https://xinyufeng.net/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>记录 ThinkCMF 框架 X2.2.3 版本漏洞发现与解决</title>
    <link href="https://xinyufeng.net/2023/03/23/%E8%AE%B0%E5%BD%95-ThinkCMF-%E6%A1%86%E6%9E%B6-X2-2-3-%E7%89%88%E6%9C%AC%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0%E4%B8%8E%E8%A7%A3%E5%86%B3/"/>
    <id>https://xinyufeng.net/2023/03/23/记录-ThinkCMF-框架-X2-2-3-版本漏洞发现与解决/</id>
    <published>2023-03-23T11:25:31.000Z</published>
    <updated>2024-04-26T02:56:55.839Z</updated>
    
    <content type="html"><![CDATA[<p>接到网警通知，说网站有安全漏洞，根据网警提供的检测报告，经过各种尝试，终于复现了，现在记录这一激动人心的时刻</p><p>网站是基于ThinkCMF框架搭建的，查看版本是<code>X2.2.3</code>，根据网警提供的检测报告在postman工具上操作复现漏洞情况</p><ul><li>使用POST方式请求首页链接地址</li><li>使用form-data提交参数</li><li>参数<code>content=&lt;php&gt;die(assert(&#39;ev&#39;.&#39;a&#39;.&#39;l(&quot;&#39;.&#39;e&#39;.&#39;va&#39;.&#39;l(bas&#39;.&#39;e64_de&#39;.&#39;code(\&quot;cGhwaW5mbygpOw==\&quot;));;return 1;&quot;)&#39;))&lt;/php&gt;</code></li><li>参数<code>a=fetch</code></li></ul><p>点击发送，看看结果，意不意外惊不惊喜！</p><a id="more"></a><p><a href="/2023/03/23/记录-ThinkCMF-框架-X2-2-3-版本漏洞发现与解决/1.png"><img src="/2023/03/23/记录-ThinkCMF-框架-X2-2-3-版本漏洞发现与解决/1.png" alt></a></p><p>居然打印出了<code>phpinfo()</code></p><p>那找解决方法吧，升级框架肯定是不现实的，好歹是找了解决方案</p><p>原因是构造<code>a</code>参数的<code>fetch</code>方法和<code>display</code>方法导致了这个漏洞</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加载模板和页面输出 可以返回输出内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@access</span> public</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $templateFile 模板文件名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $charset 模板输出字符集</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $contentType 输出类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $content 模板输出内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span><span class="params">($templateFile = <span class="string">''</span>, $charset = <span class="string">''</span>, $contentType = <span class="string">''</span>, $content = <span class="string">''</span>, $prefix = <span class="string">''</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">parent</span>::display(<span class="keyword">$this</span>-&gt;parseTemplate($templateFile), $charset, $contentType,$content,$prefix);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取输出页面内容</span></span><br><span class="line"><span class="comment"> * 调用内置的模板引擎fetch方法，</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@access</span> protected</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $templateFile 指定要调用的模板文件</span></span><br><span class="line"><span class="comment"> * 默认为空 由系统自动定位模板文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $content 模板输出内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $prefix 模板缓存前缀*</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fetch</span><span class="params">($templateFile=<span class="string">''</span>,$content=<span class="string">''</span>,$prefix=<span class="string">''</span>)</span></span>&#123;</span><br><span class="line">    $templateFile = <span class="keyword">empty</span>($content)?<span class="keyword">$this</span>-&gt;parseTemplate($templateFile):<span class="string">''</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">parent</span>::fetch($templateFile,$content,$prefix);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将<code>HomebaseController.class.php</code>和<code>AdminbaseController.class.php</code>类中<code>display</code>和<code>fetch</code>函数修饰符改为<code>protected</code></p><p>因为它的这两个方法是公用的，我们需要把它改为私用的，这样才可以不被前端的用户去任意的利用。</p><p>修复后，再次访问，解决了</p><p><a href="/2023/03/23/记录-ThinkCMF-框架-X2-2-3-版本漏洞发现与解决/2.png"><img src="/2023/03/23/记录-ThinkCMF-框架-X2-2-3-版本漏洞发现与解决/2.png" alt></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接到网警通知，说网站有安全漏洞，根据网警提供的检测报告，经过各种尝试，终于复现了，现在记录这一激动人心的时刻&lt;/p&gt;
&lt;p&gt;网站是基于ThinkCMF框架搭建的，查看版本是&lt;code&gt;X2.2.3&lt;/code&gt;，根据网警提供的检测报告在postman工具上操作复现漏洞情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用POST方式请求首页链接地址&lt;/li&gt;
&lt;li&gt;使用form-data提交参数&lt;/li&gt;
&lt;li&gt;参数&lt;code&gt;content=&amp;lt;php&amp;gt;die(assert(&amp;#39;ev&amp;#39;.&amp;#39;a&amp;#39;.&amp;#39;l(&amp;quot;&amp;#39;.&amp;#39;e&amp;#39;.&amp;#39;va&amp;#39;.&amp;#39;l(bas&amp;#39;.&amp;#39;e64_de&amp;#39;.&amp;#39;code(\&amp;quot;cGhwaW5mbygpOw==\&amp;quot;));;return 1;&amp;quot;)&amp;#39;))&amp;lt;/php&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;参数&lt;code&gt;a=fetch&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;点击发送，看看结果，意不意外惊不惊喜！&lt;/p&gt;
    
    </summary>
    
      <category term="网络安全" scheme="https://xinyufeng.net/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="安全漏洞" scheme="https://xinyufeng.net/tags/%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 模型关联查询已物理删除的数据设置默认值</title>
    <link href="https://xinyufeng.net/2023/03/16/Laravel-%E6%A8%A1%E5%9E%8B%E5%85%B3%E8%81%94%E6%9F%A5%E8%AF%A2%E5%B7%B2%E7%89%A9%E7%90%86%E5%88%A0%E9%99%A4%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E5%80%BC/"/>
    <id>https://xinyufeng.net/2023/03/16/Laravel-模型关联查询已物理删除的数据设置默认值/</id>
    <published>2023-03-16T02:30:09.000Z</published>
    <updated>2023-03-16T02:38:13.741Z</updated>
    
    <content type="html"><![CDATA[<p>在使用Laravel模型关联数据时，会遇到关联查询到的数据已被删除，会导致查询结果为<code>null</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.......</span><br><span class="line">&quot;created_at&quot;: &quot;2023-02-15 16:01:40&quot;,</span><br><span class="line">&quot;updated_at&quot;: &quot;2023-02-15 16:03:22&quot;,</span><br><span class="line">&quot;category&quot;: null,</span><br><span class="line">.......</span><br></pre></td></tr></table></figure><p>如果想要保证查询结果不会出现<code>null</code>，可以使用 Laravel 的「Eloquent」 ORM 中的「withDefault」方法来设置默认值。例如：</p><a id="more"></a><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">category</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasOne(Category::class, <span class="string">'id'</span>, <span class="string">'cate_id'</span>)-&gt;withDefault();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，即使没有找到匹配的记录，您也可以得到一个具有默认值的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.......</span><br><span class="line">&quot;created_at&quot;: &quot;2023-02-15 16:01:40&quot;,</span><br><span class="line">&quot;updated_at&quot;: &quot;2023-02-15 16:03:22&quot;,</span><br><span class="line">&quot;category&quot;:&#123;</span><br><span class="line">    &quot;id&quot;: 437</span><br><span class="line">&#125;</span><br><span class="line">.......</span><br></pre></td></tr></table></figure><p>如果我们还想要默认分类名称值（分类名称字段我定义的是<code>name</code>）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">category</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasOne(Category::class, <span class="string">'id'</span>, <span class="string">'cate_id'</span>)-&gt;withDefault([<span class="string">'name'</span>=&gt;<span class="string">'分类已删除'</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，查询结果是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.......</span><br><span class="line">&quot;created_at&quot;: &quot;2023-02-15 16:01:40&quot;,</span><br><span class="line">&quot;updated_at&quot;: &quot;2023-02-15 16:03:22&quot;,</span><br><span class="line">&quot;category&quot;:&#123;</span><br><span class="line">    &quot;id&quot;: 437,</span><br><span class="line">    &quot;name&quot;: &quot;分类已删除&quot;</span><br><span class="line">&#125;</span><br><span class="line">.......</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用Laravel模型关联数据时，会遇到关联查询到的数据已被删除，会导致查询结果为&lt;code&gt;null&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;created_at&amp;quot;: &amp;quot;2023-02-15 16:01:40&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;updated_at&amp;quot;: &amp;quot;2023-02-15 16:03:22&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;category&amp;quot;: null,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果想要保证查询结果不会出现&lt;code&gt;null&lt;/code&gt;，可以使用 Laravel 的「Eloquent」 ORM 中的「withDefault」方法来设置默认值。例如：&lt;/p&gt;
    
    </summary>
    
      <category term="PHP框架" scheme="https://xinyufeng.net/categories/PHP%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Laravel" scheme="https://xinyufeng.net/categories/PHP%E6%A1%86%E6%9E%B6/Laravel/"/>
    
    
      <category term="Laravel模型" scheme="https://xinyufeng.net/tags/Laravel%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Laravel安装laravel-wechat实现微信授权登录</title>
    <link href="https://xinyufeng.net/2023/02/22/Laravel%E5%AE%89%E8%A3%85laravel-wechat%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E6%8E%88%E6%9D%83%E7%99%BB%E5%BD%95/"/>
    <id>https://xinyufeng.net/2023/02/22/Laravel安装laravel-wechat实现微信授权登录/</id>
    <published>2023-02-22T01:42:52.000Z</published>
    <updated>2023-03-16T02:27:22.455Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用composer安装laravel-wechat"><a href="#使用composer安装laravel-wechat" class="headerlink" title="使用composer安装laravel-wechat"></a>使用composer安装<code>laravel-wechat</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require <span class="string">"overtrue/laravel-wechat"</span></span><br></pre></td></tr></table></figure><p>如果需要安装指定版本</p><ol><li>安装不超过<code>4.0</code>的版本最新版本</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require <span class="string">"overtrue/laravel-wechat:~4.0"</span></span><br></pre></td></tr></table></figure><ol start="2"><li>安装不超过<code>4</code>的版本最新版本</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require <span class="string">"overtrue/laravel-wechat:^4.0"</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>建议laravel5.4安装<code>4.0</code>版本</p><h2 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h2><p>如果是Laravel5.4（含）以下版本，需要手动注册ServiceProvider 和 Facade</p><p>在config/app.php文件编辑</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'providers'</span> =&gt; [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    Overtrue\LaravelWeChat\ServiceProvider::class,</span><br><span class="line">],</span><br><span class="line"><span class="string">'aliases'</span> =&gt; [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="string">'EasyWeChat'</span> =&gt; Overtrue\LaravelWeChat\Facade::class,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>创建配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan vendor:publish --provider=<span class="string">"Overtrue\LaravelWeChat\ServiceProvider"</span></span><br></pre></td></tr></table></figure><p>会生成<code>config/wechat.php</code>文件</p><h2 id="在-env文件添加配置参数"><a href="#在-env文件添加配置参数" class="headerlink" title="在.env文件添加配置参数"></a>在.env文件添加配置参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WECHAT_OFFICIAL_ACCOUNT_APPID=</span><br><span class="line">WECHAT_OFFICIAL_ACCOUNT_SECRET=</span><br><span class="line">WECHAT_OFFICIAL_ACCOUNT_TOKEN=</span><br><span class="line">WECHAT_OFFICIAL_ACCOUNT_AES_KEY=</span><br></pre></td></tr></table></figure><p>WECHAT_OFFICIAL_ACCOUNT_APPID：微信公众号AppID<br>WECHAT_OFFICIAL_ACCOUNT_SECRET：微信公众号AppSecret<br>WECHAT_OFFICIAL_ACCOUNT_TOKEN：微信公众号Token<br>WECHAT_OFFICIAL_ACCOUNT_AES_KEY：微信公众号EncodingAESKey</p><h2 id="定义路由"><a href="#定义路由" class="headerlink" title="定义路由"></a>定义路由</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Route::any(<span class="string">'wechat'</span>, <span class="string">'WeChatController@serve'</span>);</span><br></pre></td></tr></table></figure><blockquote><p>一定是 Route::any, 因为微信服务端认证的时候是 GET, 接收用户消息时是 POST ！</p></blockquote><h2 id="创建控制器"><a href="#创建控制器" class="headerlink" title="创建控制器"></a>创建控制器</h2><p><code>app/Http/Controllers/WeChatController.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Log</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeChatController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">serve</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Log::info(<span class="string">'request arrived'</span>);</span><br><span class="line"></span><br><span class="line">        $app = app(<span class="string">'wechat.official_account'</span>);</span><br><span class="line">        $app-&gt;server-&gt;push(<span class="function"><span class="keyword">function</span><span class="params">($message)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"欢迎关注！"</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $app-&gt;server-&gt;serve();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用composer安装laravel-wechat&quot;&gt;&lt;a href=&quot;#使用composer安装laravel-wechat&quot; class=&quot;headerlink&quot; title=&quot;使用composer安装laravel-wechat&quot;&gt;&lt;/a&gt;使用composer安装&lt;code&gt;laravel-wechat&lt;/code&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;composer require &lt;span class=&quot;string&quot;&gt;&quot;overtrue/laravel-wechat&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果需要安装指定版本&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装不超过&lt;code&gt;4.0&lt;/code&gt;的版本最新版本&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;composer require &lt;span class=&quot;string&quot;&gt;&quot;overtrue/laravel-wechat:~4.0&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;安装不超过&lt;code&gt;4&lt;/code&gt;的版本最新版本&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;composer require &lt;span class=&quot;string&quot;&gt;&quot;overtrue/laravel-wechat:^4.0&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="PHP框架" scheme="https://xinyufeng.net/categories/PHP%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Laravel" scheme="https://xinyufeng.net/categories/PHP%E6%A1%86%E6%9E%B6/Laravel/"/>
    
    
      <category term="composer扩展" scheme="https://xinyufeng.net/tags/composer%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>Nginx配置location语法规则</title>
    <link href="https://xinyufeng.net/2023/01/28/Nginx%E9%85%8D%E7%BD%AElocation%E8%AF%AD%E6%B3%95%E8%A7%84%E5%88%99/"/>
    <id>https://xinyufeng.net/2023/01/28/Nginx配置location语法规则/</id>
    <published>2023-01-28T01:51:11.000Z</published>
    <updated>2023-01-28T07:06:10.330Z</updated>
    
    <content type="html"><![CDATA[<h2 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h2><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location [=|~|~*|^~|@] /uri/ &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修饰符释义：</p><table><thead><tr><th style="text-align:center">修饰符</th><th>释义</th></tr></thead><tbody><tr><td style="text-align:center"><code>=</code></td><td>表示精确匹配后面的url</td></tr><tr><td style="text-align:center"><code>~</code></td><td>表示正则匹配，但是区分大小写</td></tr><tr><td style="text-align:center"><code>~*</code></td><td>表示正则匹配，不区分大小写</td></tr><tr><td style="text-align:center"><code>^~</code></td><td>表示普通字符匹配，如果该选项匹配，只匹配该选项，不匹配别的选项，一般用来匹配目录</td></tr><tr><td style="text-align:center"><code>@</code></td><td>“@” 定义一个命名的 location，使用在内部定向时，例如 error_page</td></tr><tr><td style="text-align:center"><code>/</code></td><td>通用匹配，任何请求都会匹配到</td></tr></tbody></table><p>上述匹配规则的优先匹配顺序：</p><a id="more"></a><ul><li><code>=</code> 前缀的指令严格匹配这个查询。如果找到，停止搜索；</li><li>所有剩下的常规字符串，最长的匹配。如果这个匹配使用 ^~ 前缀，搜索停止；</li><li>正则表达式，在配置文件中定义的顺序；</li><li>如果第 3 条规则<code>~*</code>产生匹配的话，结果被使用。否则，使用第 2 条规则<code>~</code>的结果。</li></ul><h2 id="匹配案例"><a href="#匹配案例" class="headerlink" title="匹配案例"></a>匹配案例</h2><h3 id="通过精确匹配"><a href="#通过精确匹配" class="headerlink" title="通过精确匹配"></a>通过精确匹配</h3><p>配置文件内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen  80;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    location /test.html &#123;</span><br><span class="line">        root /www/wwwroot/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location = /test.html &#123;</span><br><span class="line">        root /www/wwwroot/nginx/test.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个location匹配条件一样，都是/test.html，但是第二个为精确匹配到静态文件路径，因此第一个不会执行，会执行第二个。</p><p>指定静态资源路径用的关键字<code>root</code>，还可以用<code>alias</code>，那么<code>root</code>和<code>alias</code>的区别是什么？</p><ul><li>用<code>root</code>属性指定的值是要加入到最终路径中的，匹配条件会拼接到路径中</li><li>用<code>alias</code>属性指定的值不需要加入到最终路径中</li></ul><p>根据上述配置文件内容，请求的条件为<code>test.html</code>，通过<code>root</code>指定的路径为<code>/www/wwwroot/nginx/html</code>，因此在匹配的时候，这个路径下就必须要有<code>test.html</code>这个文件才可以，否则就会找不到而报错，如果用<code>alias</code>，那么通过浏览器进行请求的时候，<code>alias</code>也是指定到<code>/www/wwwroot/nginx/html</code>路径下，但是会匹配默认的<code>index.html</code>，而无须强制匹配<code>test.html</code>，但是此时就不能使用<code>=</code>来进行精确匹配，现在将<code>root</code>改为<code>alias</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen  80;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    location /test.html &#123;</span><br><span class="line">        alias /www/wwwroot/nginx/html/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：alias指定的路径结尾要加<code>/</code></p></blockquote><p>来个<code>root</code>和<code>alias</code>的区别例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen  80;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    location /html/ &#123;</span><br><span class="line">        root /www/wwwroot/nginx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问 <code>域名/html</code> 的时候，将跳转到<code>/www/wwwroot/nginx/html/</code>目录下的<code>index.html</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen  80;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    location /html_alias/ &#123;</span><br><span class="line">        alias /www/wwwroot/nginx/html/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问 <code>域名/html_alias</code> 的时候，将跳转到<code>/www/wwwroot/nginx/html/</code>目录下的<code>index.html</code>文件</p><h3 id="通过-方式实现匹配"><a href="#通过-方式实现匹配" class="headerlink" title="通过^~方式实现匹配"></a>通过^~方式实现匹配</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen  80;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    location ^~ /a/ &#123;</span><br><span class="line">        return 111;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ^~ /a/b/ &#123;</span><br><span class="line">        return 222;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果访问 <code>域名/a</code> 返回 <code>111</code></li><li>如果访问 <code>域名/a/b</code> 返回 <code>222</code></li><li>如果访问 <code>域名/a/b/sdf</code> 返回 <code>222</code></li></ul><p>从结果看，两条规则同时被匹配成功，但是第二条规则比较长，因此第二条规则优先被匹配，如果^~匹配成功了，那么表示阻断正则表达式，不再进行正则匹配。</p><h3 id="通过-方式实现匹配-1"><a href="#通过-方式实现匹配-1" class="headerlink" title="通过~方式实现匹配"></a>通过~方式实现匹配</h3><p>在匹配最长规则的时候，除了通过^~来实现匹配，还有通过普通匹配来实现。</p><p>当最长规则是通过普通匹配的时候，将会继续正则匹配， 只要有一个正则成功，则使用这个正则的location，停止继续匹配，返回结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen  80;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    location ^~ /a/ &#123;</span><br><span class="line">        return 111;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /a/b/ &#123;</span><br><span class="line">        return 222;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ /a/b/ &#123;#区分大小写的正则匹配</span><br><span class="line">        return 333;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果访问 <code>域名/a</code> 返回 <code>111</code></li><li>如果访问 <code>域名/a/b</code> 返回 <code>333</code></li><li>如果访问 <code>域名/a/b/sdf</code> 返回 <code>333</code></li></ul><p>从结果看，可以看出请求<code>/a/b/</code>的时候，首先会到达第二条规则(最长规则)，由于第二条规则为普通匹配(不是<code>^~</code>匹配)，因此会继续去匹配正则，也就是第三条规则，因此最终返回<code>333</code>。</p><h3 id="通过-方式实现匹配-2"><a href="#通过-方式实现匹配-2" class="headerlink" title="通过~*方式实现匹配"></a>通过~*方式实现匹配</h3><p><code>~*</code> 表示不区分大小写的正则匹配</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen  80;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    location ^~ /a/ &#123;</span><br><span class="line">        return 111;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /a/b/ &#123;</span><br><span class="line">        return 222;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~* /a/b/ &#123;#不区分大小写的正则匹配</span><br><span class="line">        return 333;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果访问 <code>域名/a/b/sdf</code> 返回 <code>333</code></li><li>如果访问 <code>域名/A/B/sdf</code> 返回 <code>333</code></li></ul><p>从结果看，无论匹配的是大写还是小写，都会返回<code>333</code></p><p>常用方法还有匹配图片后缀，并返回指定信息，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen  80;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    location ~* \.(gif|jpg|png) &#123;#不区分大小写，并以gif|jpg|png后缀结尾</span><br><span class="line">        return 444;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果访问 <code>域名/a.jpg</code> 返回 <code>444</code></li><li>如果访问 <code>域名/A.JPG</code> 返回 <code>444</code></li></ul><h3 id="通过-实现通用匹配"><a href="#通过-实现通用匹配" class="headerlink" title="通过/ 实现通用匹配"></a>通过/ 实现通用匹配</h3><ol><li>proxy_pass（代理转发）最后面没有斜杠,匹配路径有斜杠(/aaa/)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen  80;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    location /aaa/ &#123;</span><br><span class="line">        proxy_pass  http://127.0.0.1:8081;</span><br><span class="line">        proxy_rediect off;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>proxy_pass最后面没有斜杠<code>/</code>，此时通过浏览器请求http://域名/aaa/，那么实际访问的地址就是 <a href="http://127.0.0.1:8081/aaa/，会将匹配路径/aaa一起加过去。" target="_blank" rel="noopener">http://127.0.0.1:8081/aaa/，会将匹配路径/aaa一起加过去。</a></p><ol start="2"><li>proxy_pass最后面有斜杠<code>/</code>，匹配路径也有斜杠(/aaa/)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen  80;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    location /aaa/ &#123;</span><br><span class="line">        proxy_pass  http://127.0.0.1:8081/;</span><br><span class="line">        proxy_rediect off;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>proxy_pass最后面有斜杠<code>/</code>，此时通过浏览器请求http://域名/aaa/，那么实际访问的地址就是 <a href="http://127.0.0.1:8081，会将/aaa抛弃的。" target="_blank" rel="noopener">http://127.0.0.1:8081，会将/aaa抛弃的。</a></p><ol start="3"><li>proxy_pass后面还有其他路径但是最后没有 <code>/</code>， 匹配路径也有斜杠(/aaa/)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen  80;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    location /aaa/ &#123;</span><br><span class="line">        proxy_pass  http://127.0.0.1:8081/bbb;</span><br><span class="line">        proxy_rediect off;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时通过浏览器访问http://域名/aaa/index.html，实际请求的是<a href="http://127.0.0.1:8081/bbbindex.html(注意位置是默认路径下，不是`bbb`路径下，如果proxy_pass的路径为`/bbb/ccc`，那么实际请求的就是`bbb`路径下的`cccindex.html`)" target="_blank" rel="noopener">http://127.0.0.1:8081/bbbindex.html(注意位置是默认路径下，不是`bbb`路径下，如果proxy_pass的路径为`/bbb/ccc`，那么实际请求的就是`bbb`路径下的`cccindex.html`)</a></p><ol start="4"><li>proxy_pass后面还有其他路径但是最后有 <code>/</code>， 匹配路径也有斜杠(/aaa/)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen  80;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    location /aaa/ &#123;</span><br><span class="line">        proxy_pass  http://127.0.0.1:8081/bbb/;</span><br><span class="line">        proxy_rediect off;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时通过浏览器访问：http://域名/aaa/index.html，实际访问的是<a href="http://127.0.0.1:8081/bbb/index.html" target="_blank" rel="noopener">http://127.0.0.1:8081/bbb/index.html</a></p><ol start="5"><li>location匹配路径末尾没有 <code>/</code>，proxy_pass后面也没有<code>/</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen  80;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    location /aaa &#123;</span><br><span class="line">        proxy_pass  http://127.0.0.1:8081;</span><br><span class="line">        proxy_rediect off;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时访问http://域名/aaa，默认将请求到<a href="http://127.0.0.1:8081/aaa/index.html的内容" target="_blank" rel="noopener">http://127.0.0.1:8081/aaa/index.html的内容</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;语法规则&quot;&gt;&lt;a href=&quot;#语法规则&quot; class=&quot;headerlink&quot; title=&quot;语法规则&quot;&gt;&lt;/a&gt;语法规则&lt;/h2&gt;&lt;p&gt;基本语法：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;location [=|~|~*|^~|@] /uri/ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;修饰符释义：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;修饰符&lt;/th&gt;
&lt;th&gt;释义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;表示精确匹配后面的url&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;~&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;表示正则匹配，但是区分大小写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;~*&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;表示正则匹配，不区分大小写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;^~&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;表示普通字符匹配，如果该选项匹配，只匹配该选项，不匹配别的选项，一般用来匹配目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;@&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;“@” 定义一个命名的 location，使用在内部定向时，例如 error_page&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;通用匹配，任何请求都会匹配到&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;上述匹配规则的优先匹配顺序：&lt;/p&gt;
    
    </summary>
    
      <category term="服务器" scheme="https://xinyufeng.net/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Nginx" scheme="https://xinyufeng.net/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://xinyufeng.net/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>PHP 多维数组转为树结构</title>
    <link href="https://xinyufeng.net/2022/12/15/PHP-%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84%E8%BD%AC%E4%B8%BA%E6%A0%91%E7%BB%93%E6%9E%84/"/>
    <id>https://xinyufeng.net/2022/12/15/PHP-多维数组转为树结构/</id>
    <published>2022-12-15T07:34:01.000Z</published>
    <updated>2022-12-15T07:45:43.837Z</updated>
    
    <content type="html"><![CDATA[<p>在项目中我们会遇到获取存在父子级关系的数组，并需要根据上下级关系以树结构的形式展示的情况</p><p>比如获取分类列表，类似如下数据</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$data = [</span><br><span class="line">[<span class="string">'id'</span>=&gt;<span class="number">13</span>, <span class="string">'name'</span>=&gt;<span class="string">'分类2-2-2'</span>, <span class="string">'pid'</span>=&gt;<span class="number">9</span>],</span><br><span class="line">[<span class="string">'id'</span>=&gt;<span class="number">1</span>, <span class="string">'name'</span>=&gt;<span class="string">'分类1'</span>, <span class="string">'pid'</span>=&gt;<span class="number">0</span>],</span><br><span class="line">[<span class="string">'id'</span>=&gt;<span class="number">2</span>, <span class="string">'name'</span>=&gt;<span class="string">'分类1-1'</span>, <span class="string">'pid'</span>=&gt;<span class="number">1</span>],</span><br><span class="line">[<span class="string">'id'</span>=&gt;<span class="number">3</span>, <span class="string">'name'</span>=&gt;<span class="string">'分类1-2'</span>, <span class="string">'pid'</span>=&gt;<span class="number">1</span>],</span><br><span class="line">[<span class="string">'id'</span>=&gt;<span class="number">4</span>, <span class="string">'name'</span>=&gt;<span class="string">'分类1-1-1'</span>, <span class="string">'pid'</span>=&gt;<span class="number">2</span>],</span><br><span class="line">[<span class="string">'id'</span>=&gt;<span class="number">5</span>, <span class="string">'name'</span>=&gt;<span class="string">'分类1-1-2'</span>, <span class="string">'pid'</span>=&gt;<span class="number">2</span>],</span><br><span class="line">[<span class="string">'id'</span>=&gt;<span class="number">6</span>, <span class="string">'name'</span>=&gt;<span class="string">'分类1-2-1'</span>, <span class="string">'pid'</span>=&gt;<span class="number">3</span>],</span><br><span class="line">[<span class="string">'id'</span>=&gt;<span class="number">7</span>, <span class="string">'name'</span>=&gt;<span class="string">'分类2'</span>, <span class="string">'pid'</span>=&gt;<span class="number">0</span>],</span><br><span class="line">[<span class="string">'id'</span>=&gt;<span class="number">8</span>, <span class="string">'name'</span>=&gt;<span class="string">'分类2-1'</span>, <span class="string">'pid'</span>=&gt;<span class="number">7</span>],</span><br><span class="line">[<span class="string">'id'</span>=&gt;<span class="number">9</span>, <span class="string">'name'</span>=&gt;<span class="string">'分类2-2'</span>, <span class="string">'pid'</span>=&gt;<span class="number">7</span>],</span><br><span class="line">[<span class="string">'id'</span>=&gt;<span class="number">10</span>, <span class="string">'name'</span>=&gt;<span class="string">'分类2-1-1'</span>, <span class="string">'pid'</span>=&gt;<span class="number">8</span>],</span><br><span class="line">[<span class="string">'id'</span>=&gt;<span class="number">11</span>, <span class="string">'name'</span>=&gt;<span class="string">'分类2-1-2'</span>, <span class="string">'pid'</span>=&gt;<span class="number">8</span>],</span><br><span class="line">[<span class="string">'id'</span>=&gt;<span class="number">12</span>, <span class="string">'name'</span>=&gt;<span class="string">'分类2-2-1'</span>, <span class="string">'pid'</span>=&gt;<span class="number">9</span>],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><a id="more"></a><p>实现方法代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将返回的数据集转换成树</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  array   $list  数据集</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  string  $pk    主键</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  string  $pid   父节点名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  string  $child 子节点名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  integer $root  根节点ID</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> array          转换后的树</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">list_to_tree</span><span class="params">($list, $pk = <span class="string">'id'</span>, $pid = <span class="string">'pid'</span>, $child = <span class="string">'child'</span>, $root=<span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    $tree = <span class="keyword">array</span>();<span class="comment">// 创建Tree</span></span><br><span class="line">    <span class="keyword">if</span>(is_array($list)) &#123;</span><br><span class="line">        <span class="comment">// 创建基于主键的数组引用</span></span><br><span class="line">        $refer = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">foreach</span> ($list <span class="keyword">as</span> $index =&gt; $data) &#123;</span><br><span class="line"><span class="comment">/*基于主键的新数组与之前的数组地址一样，修改其中一个数组的数据另一个也会变*/</span></span><br><span class="line">            $refer[$data[$pk]] =&amp; $list[$index];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> ($list <span class="keyword">as</span> $key =&gt; $data) &#123;</span><br><span class="line">            <span class="comment">// 判断是否存在parent</span></span><br><span class="line">            $parentId = $data[$pid];</span><br><span class="line">            <span class="keyword">if</span> ($root == $parentId) &#123;</span><br><span class="line">                $tree[$data[$pk]] =&amp; $list[$key];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">isset</span>($refer[$parentId])) &#123;</span><br><span class="line">                    $parent =&amp; $refer[$parentId];</span><br><span class="line">                    $parent[$child][] =&amp; $list[$key];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $tree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;pre&gt;'</span>;var_dump(list_to_tree($data));</span><br></pre></td></tr></table></figure><p>主要思路概况是，把要遍历的数组，创建基于主键的数组引用。把要生成的树结构数组也数组引用</p><p>比如案例中的 <code>$refer[13] === $list[0]</code>,<code>$tree[13] === $refer[13]</code>，利用了多个变量指向同地址，其中一个参数改变了数据，另外的参数数据也会改变。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在项目中我们会遇到获取存在父子级关系的数组，并需要根据上下级关系以树结构的形式展示的情况&lt;/p&gt;
&lt;p&gt;比如获取分类列表，类似如下数据&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$data = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;string&quot;&gt;&#39;分类2-2-2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;pid&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;string&quot;&gt;&#39;分类1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;pid&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;string&quot;&gt;&#39;分类1-1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;pid&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;string&quot;&gt;&#39;分类1-2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;pid&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;string&quot;&gt;&#39;分类1-1-1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;pid&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;string&quot;&gt;&#39;分类1-1-2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;pid&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;string&quot;&gt;&#39;分类1-2-1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;pid&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;string&quot;&gt;&#39;分类2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;pid&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;string&quot;&gt;&#39;分类2-1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;pid&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;string&quot;&gt;&#39;分类2-2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;pid&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;string&quot;&gt;&#39;分类2-1-1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;pid&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;string&quot;&gt;&#39;分类2-1-2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;pid&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;string&quot;&gt;&#39;分类2-2-1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;pid&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="后端开发" scheme="https://xinyufeng.net/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="PHP" scheme="https://xinyufeng.net/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/PHP/"/>
    
    
      <category term="PHP技巧" scheme="https://xinyufeng.net/tags/PHP%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Linux环境安装nvm</title>
    <link href="https://xinyufeng.net/2022/10/18/Linux%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85nvm/"/>
    <id>https://xinyufeng.net/2022/10/18/Linux环境安装nvm/</id>
    <published>2022-10-18T02:24:41.000Z</published>
    <updated>2022-10-18T02:37:00.089Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>nvm是一个管理node多版本的工具<br>系统为CentOS7</p></blockquote><ol><li>下载nvm安装包</li></ol><p>官方下载：<a href="https://github.com/nvm-sh/nvm/archive/refs/tags/v0.39.2.tar.gz" target="_blank" rel="noopener">https://github.com/nvm-sh/nvm/archive/refs/tags/v0.39.2.tar.gz</a></p><ol start="2"><li>加压nvm压缩包</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 进入文件下载目录</span><br><span class="line">[root@localhost ~]<span class="comment"># cd /usr/local/src</span></span><br><span class="line">// 解压文件到 root/.nvm</span><br><span class="line">[root@localhost ~]<span class="comment"># tar -zxvf nvm-0.39.2.tar.gz --strip-components 1  -C /root/.nvm</span></span><br></pre></td></tr></table></figure><a id="more"></a><ol start="3"><li>配置环境</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vi ~/.bashrc</span></span><br></pre></td></tr></table></figure><p>在<code>~/.bashrc</code>的末尾，添加如下语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span>  <span class="comment"># This loads nvm</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/bash_completion"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/bash_completion"</span>  <span class="comment"># This loads nvm bash_completion</span></span><br></pre></td></tr></table></figure><p><code>wq</code>保存文件并退出</p><ol start="4"><li>配置生效(重启配置)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># source ~/.bashrc</span></span><br></pre></td></tr></table></figure><ol start="5"><li>验证nvm是否安装成功</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># nvm -v</span></span><br><span class="line">0.39.2</span><br><span class="line">[root@localhost ~]<span class="comment"># nvm --version</span></span><br><span class="line">0.39.2</span><br></pre></td></tr></table></figure><p><strong>常用操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#nvm常用命令</span></span><br><span class="line">nvm ls-remote           // 查看目前线上所能安装的所有 node 版本</span><br><span class="line">nvm install 12.22.12    // 安装node</span><br><span class="line">nvm uninstall 14.13.2   // 移除 node</span><br><span class="line">nvm use 14.13.2         // 使用 node </span><br><span class="line">nvm ls                  // 查看目前已安装的 node 及当前所使用的 node</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;nvm是一个管理node多版本的工具&lt;br&gt;系统为CentOS7&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;下载nvm安装包&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;官方下载：&lt;a href=&quot;https://github.com/nvm-sh/nvm/archive/refs/tags/v0.39.2.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/nvm-sh/nvm/archive/refs/tags/v0.39.2.tar.gz&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;加压nvm压缩包&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 进入文件下载目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@localhost ~]&lt;span class=&quot;comment&quot;&gt;# cd /usr/local/src&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 解压文件到 root/.nvm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@localhost ~]&lt;span class=&quot;comment&quot;&gt;# tar -zxvf nvm-0.39.2.tar.gz --strip-components 1  -C /root/.nvm&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="前端框架" scheme="https://xinyufeng.net/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Nodejs" scheme="https://xinyufeng.net/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Nodejs/"/>
    
    
      <category term="nvm" scheme="https://xinyufeng.net/tags/nvm/"/>
    
      <category term="Nodejs" scheme="https://xinyufeng.net/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Yii2 创建定时任务</title>
    <link href="https://xinyufeng.net/2022/08/30/Yii2-%E5%88%9B%E5%BB%BA%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>https://xinyufeng.net/2022/08/30/Yii2-创建定时任务/</id>
    <published>2022-08-30T06:20:49.000Z</published>
    <updated>2022-08-30T07:38:50.480Z</updated>
    
    <content type="html"><![CDATA[<p>在我们项目开发中，需要使用定时任务来完成批处理业务，下面通过Yii2框架来实现定时任务</p><p>Yii2框架定时任务代码统一放在 <code>./console</code> 目录下</p><h2 id="简单的定时任务脚步文件"><a href="#简单的定时任务脚步文件" class="headerlink" title="简单的定时任务脚步文件"></a>简单的定时任务脚步文件</h2><p>首先在<code>console/controller目录下</code>创建一个定时任务控制器<code>TestController.php</code></p><a id="more"></a><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">console</span>\<span class="title">controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">console</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行测试脚本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionDo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'hello test console'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在控制台运行命令<code>php yii</code>，会看到<code>test</code>控制下的<code>do</code>方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">······</span><br><span class="line">- test</span><br><span class="line">    test/do                        执行测试脚本</span><br></pre></td></tr></table></figure><p>执行脚步命令<code>php yii 控制器名/方法名</code>，会输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php yii <span class="built_in">test</span>/<span class="keyword">do</span></span><br><span class="line">hello <span class="built_in">test</span> console</span><br></pre></td></tr></table></figure><p>这就完成了一个简单的定时任务脚步控制器</p><h2 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h2><p>如果需要传递参数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">console</span>\<span class="title">controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">console</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> integer 接收的参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> $param1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string 接收的参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> $param2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $actionID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">options</span><span class="params">($actionID)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="string">'param1'</span>,</span><br><span class="line">            <span class="string">'param2'</span>,</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行测试脚本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionDo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;param1 . PHP_EOL;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;param2 . PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>param1</code>和<code>param2</code>就是参数，执行脚步命令<code>php yii 控制器名/方法名 --参数= ····</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php yii <span class="built_in">test</span>/<span class="keyword">do</span> --param1=123 --param2=hello</span><br><span class="line">123</span><br><span class="line">hello</span><br></pre></td></tr></table></figure><h2 id="设置参数别名"><a href="#设置参数别名" class="headerlink" title="设置参数别名"></a>设置参数别名</h2><p>如果需要给参数设置别名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">console</span>\<span class="title">controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">console</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> integer 接收的参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> $param1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string 接收的参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> $param2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $actionID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">options</span><span class="params">($actionID)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="string">'param1'</span>,</span><br><span class="line">            <span class="string">'param2'</span>,</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数设置别名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">optionAliases</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="string">'p1'</span> =&gt; <span class="string">'param1'</span>,</span><br><span class="line">            <span class="string">'p2'</span> =&gt; <span class="string">'param2'</span></span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行测试脚本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionDo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;param1 . PHP_EOL;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;param2 . PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>p1</code>和<code>p2</code>就是参数的别名，执行脚步命令<code>php yii 控制器名/方法名 --参数= ····</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php yii <span class="built_in">test</span>/<span class="keyword">do</span> -p1=123 -p2=hello</span><br><span class="line">123</span><br><span class="line">hello</span><br></pre></td></tr></table></figure><blockquote><p>注意：设置参数别名后，使用别名参数用一个横杆（-）链接。</p></blockquote><h2 id="在Linux配置crontab"><a href="#在Linux配置crontab" class="headerlink" title="在Linux配置crontab"></a>在Linux配置crontab</h2><p>执行命令<code>crontab -e</code>，我们以每分钟执行一次为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*/1 * * * * /usr/bin/php /var/www/html/yii2-project/yii <span class="built_in">test</span>/<span class="keyword">do</span> &gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p>其中</p><ul><li><code>/usr/bin/php</code> 是php运行文件</li><li><code>/var/www/html/yii2-project/yii</code> 项目目录中的yii 文件</li><li><code>test/do</code> 是执行脚步命令</li><li><code>&gt;/dev/null 2&gt;&amp;1</code> 这么写就行哈，可自行查找</li></ul><p>保存退出即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在我们项目开发中，需要使用定时任务来完成批处理业务，下面通过Yii2框架来实现定时任务&lt;/p&gt;
&lt;p&gt;Yii2框架定时任务代码统一放在 &lt;code&gt;./console&lt;/code&gt; 目录下&lt;/p&gt;
&lt;h2 id=&quot;简单的定时任务脚步文件&quot;&gt;&lt;a href=&quot;#简单的定时任务脚步文件&quot; class=&quot;headerlink&quot; title=&quot;简单的定时任务脚步文件&quot;&gt;&lt;/a&gt;简单的定时任务脚步文件&lt;/h2&gt;&lt;p&gt;首先在&lt;code&gt;console/controller目录下&lt;/code&gt;创建一个定时任务控制器&lt;code&gt;TestController.php&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PHP框架" scheme="https://xinyufeng.net/categories/PHP%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Yii" scheme="https://xinyufeng.net/categories/PHP%E6%A1%86%E6%9E%B6/Yii/"/>
    
    
      <category term="Yii技巧" scheme="https://xinyufeng.net/tags/Yii%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap3 实现穿梭框</title>
    <link href="https://xinyufeng.net/2022/08/23/Bootstrap3-%E5%AE%9E%E7%8E%B0%E7%A9%BF%E6%A2%AD%E6%A1%86/"/>
    <id>https://xinyufeng.net/2022/08/23/Bootstrap3-实现穿梭框/</id>
    <published>2022-08-23T01:22:43.000Z</published>
    <updated>2022-08-23T01:24:47.676Z</updated>
    
    <content type="html"><![CDATA[<p>使用 Bootstrap3 框架实现穿梭框代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Bootstrap3 穿梭框<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Bootstrap --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css"</span> <span class="attr">integrity</span>=<span class="string">"sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- HTML5 shim 和 Respond.js 是为了让 IE8 支持 HTML5 元素和媒体查询（media queries）功能 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 警告：通过 file:// 协议（就是直接将 html 页面拖拽到浏览器中）访问页面时 Respond.js 不起作用 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">      &lt;script src="https://cdn.jsdelivr.cn/npm/html5shiv@3.7.3/dist/html5shiv.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">      &lt;script src="https://cdn.jsdelivr.cn/npm/respond.js@1.4.2/dest/respond.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">    &lt;![endif]--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span>Bootstrap3 穿梭框<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered dchannel-table"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"item-default"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"width: 50%;"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"sel_all_area"</span> <span class="attr">multiple</span>=<span class="string">"multiple"</span> <span class="attr">size</span>=<span class="string">"10"</span> <span class="attr">style</span>=<span class="string">"width:100%;"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"4"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"width: 50px;"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default btn-small"</span> <span class="attr">id</span>=<span class="string">"btn_select_all_area"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-forward"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default btn-small"</span> <span class="attr">id</span>=<span class="string">"btn_choose_selected_area"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-chevron-right"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default btn-small"</span> <span class="attr">id</span>=<span class="string">"btn_remove_selected_area"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-chevron-left"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default btn-small"</span> <span class="attr">id</span>=<span class="string">"btn_remove_all_area"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-backward"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"width: 50%;"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"sel_selected_areas"</span>  <span class="attr">multiple</span>=<span class="string">"multiple"</span> <span class="attr">size</span>=<span class="string">"10"</span> <span class="attr">style</span>=<span class="string">"width:100%;"</span>&gt;</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.min.js"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"</span> <span class="attr">integrity</span>=<span class="string">"sha384-aJ21OjlMXNL5UyIl/XNwTMqvzeRMZH2w8c5cRVpzpU8Y5bApTppSuUkhZXN0VxHd"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> all_area = $(<span class="string">"#sel_all_area"</span>), selected_areas = $(<span class="string">"#sel_selected_areas"</span>);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#btn_select_all_area"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> selectedAreaArray = [];</span></span><br><span class="line"><span class="javascript">                all_area.find(<span class="string">"option"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    selectedAreaArray[i] = $(<span class="keyword">this</span>).val();</span></span><br><span class="line"><span class="javascript">                    $(<span class="keyword">this</span>).appendTo(selected_areas);</span></span><br><span class="line">                &#125;);</span><br><span class="line"><span class="javascript">                doSubmit(<span class="string">'add'</span>, selectedAreaArray.toString());</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">            &#125;);</span><br><span class="line"><span class="javascript">            $(<span class="string">"#btn_choose_selected_area"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> selectedAreaArray = [];</span></span><br><span class="line"><span class="javascript">                all_area.find(<span class="string">"option:selected"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    selectedAreaArray[i] = $(<span class="keyword">this</span>).val();</span></span><br><span class="line"><span class="javascript">                    $(<span class="keyword">this</span>).appendTo(selected_areas);</span></span><br><span class="line">                &#125;);</span><br><span class="line"><span class="javascript">                doSubmit(<span class="string">'add'</span>, selectedAreaArray.toString());</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">            &#125;);</span><br><span class="line"><span class="javascript">            $(<span class="string">"#btn_remove_selected_area"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> selectedAreaArray = [];</span></span><br><span class="line"><span class="javascript">                selected_areas.find(<span class="string">"option:selected"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    selectedAreaArray[i] = $(<span class="keyword">this</span>).val();</span></span><br><span class="line"><span class="javascript">                     $(<span class="keyword">this</span>).appendTo(all_area);</span></span><br><span class="line">                &#125;);</span><br><span class="line"><span class="javascript">                doSubmit(<span class="string">'del'</span>, selectedAreaArray.toString());</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">            &#125;);</span><br><span class="line"><span class="javascript">            $(<span class="string">"#btn_remove_all_area"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> selectedAreaArray = [];</span></span><br><span class="line"><span class="javascript">                selected_areas.find(<span class="string">"option"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    selectedAreaArray[i] = $(<span class="keyword">this</span>).val();</span></span><br><span class="line"><span class="javascript">                     $(<span class="keyword">this</span>).appendTo(all_area);</span></span><br><span class="line">                &#125;);</span><br><span class="line"><span class="javascript">                doSubmit(<span class="string">'del'</span>, selectedAreaArray.toString());</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    </span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">doSubmit</span>(<span class="params">select_type, key</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">`更新 类型: <span class="subst">$&#123;select_type&#125;</span>, KEY: <span class="subst">$&#123;key&#125;</span>`</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用 Bootstrap3 框架实现穿梭框代码&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
      <category term="前端框架" scheme="https://xinyufeng.net/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Bootstrap" scheme="https://xinyufeng.net/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Bootstrap/"/>
    
    
      <category term="Bootstrap" scheme="https://xinyufeng.net/tags/Bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 缓存操作</title>
    <link href="https://xinyufeng.net/2022/04/29/Laravel-%E7%BC%93%E5%AD%98%E6%93%8D%E4%BD%9C/"/>
    <id>https://xinyufeng.net/2022/04/29/Laravel-缓存操作/</id>
    <published>2022-04-29T03:18:42.000Z</published>
    <updated>2022-04-29T05:33:28.324Z</updated>
    
    <content type="html"><![CDATA[<p>Laravel为不同的缓存系统封装了统一的API，缓存配置文件<code>./config/cache.php</code></p><p><strong>主要的缓存类型(驱动)</strong></p><ul><li>file - 文件，默认使用</li><li>memcached - memcached</li><li>redis - redis</li><li>database - 数据库</li></ul><p>默认laravel支持缓存介质：<code>apc</code>, <code>array</code>, <code>database</code>, <code>file</code>, <code>memcached</code>, <code>redis</code></p><p>在配置文件<code>.env</code>中修改驱动类型</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CACHE_DRIVER=file</span><br></pre></td></tr></table></figure><h2 id="设置缓存"><a href="#设置缓存" class="headerlink" title="设置缓存"></a>设置缓存</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Cache</span>; <span class="comment">// Cache门面</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 如果key不存在则添加成功，如果key存在，返回false</span></span><br><span class="line">Cache::add(<span class="string">'key'</span>, <span class="string">'value'</span>, $seconds);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 不管key值是否存，都可以设置成功</span></span><br><span class="line">Cache::put(<span class="string">'key'</span>, <span class="string">'value'</span>, $seconds);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置永久缓存</span></span><br><span class="line">Cache::forever(<span class="string">'key'</span>, <span class="string">'value'</span>);</span><br></pre></td></tr></table></figure><blockquote><p>文件所生成的地方在 <code>./storage/framework/cache/data/</code> 目录下</p></blockquote><h2 id="获取缓存数据"><a href="#获取缓存数据" class="headerlink" title="获取缓存数据"></a>获取缓存数据</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$value = Cache::get(<span class="string">'key'</span>);</span><br><span class="line"></span><br><span class="line">$value = Cache::get(<span class="string">'key'</span>, <span class="string">'default'</span>);</span><br><span class="line"></span><br><span class="line">$value = Cache::get(<span class="string">'key'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取的同时并存储</span></span><br><span class="line">$value = Cache::remember(<span class="string">'users'</span>, $minutes, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'key不存的时候返回的数据'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="检查缓存项是否存在"><a href="#检查缓存项是否存在" class="headerlink" title="检查缓存项是否存在"></a>检查缓存项是否存在</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查缓存的key值是否存在，存在返回true否则返回false</span></span><br><span class="line">Cache::has(<span class="string">'key'</span>)</span><br></pre></td></tr></table></figure><h2 id="删除缓存数据"><a href="#删除缓存数据" class="headerlink" title="删除缓存数据"></a>删除缓存数据</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先获取再删除</span></span><br><span class="line">$value = Cache::pull(<span class="string">'key'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除单个</span></span><br><span class="line">Cache::forget(<span class="string">'key'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除所有的缓存</span></span><br><span class="line">Cache::flush();</span><br></pre></td></tr></table></figure><h2 id="缓存辅助函数"><a href="#缓存辅助函数" class="headerlink" title="缓存辅助函数"></a>缓存辅助函数</h2><p>除了使用 <code>Cache</code> 门面或缓存契约，还可以使用全局的 <code>cache()</code> 函数来通过缓存获取和存储数据。当带有一个字符串参数的 <code>cache()</code> 函数被调用时，会返回给定键对应的缓存值（取值）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$value = cache(<span class="string">'key'</span>);</span><br></pre></td></tr></table></figure><p>如果你提供了键值对数组和一个过期时间给该函数，则会在指定的有效期内存储缓存值（存储）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cache([<span class="string">'key'</span> =&gt; <span class="string">'value'</span>], $seconds);</span><br><span class="line"></span><br><span class="line">cache([<span class="string">'key'</span> =&gt; <span class="string">'value'</span>], now()-&gt;addMinutes(<span class="number">10</span>));</span><br></pre></td></tr></table></figure><p><code>cache()</code> 函数不带任何参数被调用时会返回 Illuminate\Contracts\Cache\Factory 实现的实例，从而允许你调用其它缓存方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cache()-&gt;remember(<span class="string">'users'</span>, $seconds, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> DB::table(<span class="string">'users'</span>)-&gt;get();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Laravel为不同的缓存系统封装了统一的API，缓存配置文件&lt;code&gt;./config/cache.php&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主要的缓存类型(驱动)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;file - 文件，默认使用&lt;/li&gt;
&lt;li&gt;memcached - memcached&lt;/li&gt;
&lt;li&gt;redis - redis&lt;/li&gt;
&lt;li&gt;database - 数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;默认laravel支持缓存介质：&lt;code&gt;apc&lt;/code&gt;, &lt;code&gt;array&lt;/code&gt;, &lt;code&gt;database&lt;/code&gt;, &lt;code&gt;file&lt;/code&gt;, &lt;code&gt;memcached&lt;/code&gt;, &lt;code&gt;redis&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在配置文件&lt;code&gt;.env&lt;/code&gt;中修改驱动类型&lt;/p&gt;
    
    </summary>
    
      <category term="PHP框架" scheme="https://xinyufeng.net/categories/PHP%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Laravel" scheme="https://xinyufeng.net/categories/PHP%E6%A1%86%E6%9E%B6/Laravel/"/>
    
    
      <category term="Laravel技巧" scheme="https://xinyufeng.net/tags/Laravel%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 表单验证 validate 规则参数</title>
    <link href="https://xinyufeng.net/2022/04/28/Laravel-%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81-validate-%E8%A7%84%E5%88%99%E5%8F%82%E6%95%B0/"/>
    <id>https://xinyufeng.net/2022/04/28/Laravel-表单验证-validate-规则参数/</id>
    <published>2022-04-28T04:58:13.000Z</published>
    <updated>2022-04-28T05:29:31.734Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简单的表单验证1</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// request() 与 $request等同</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;validate(request(), [</span><br><span class="line">        <span class="string">'title'</span> =&gt; <span class="string">'required|string'</span>,</span><br><span class="line">        <span class="string">'content'</span> =&gt; <span class="string">'required|string'</span>,</span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证通过</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>简单的表单验证2</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// request() 与 $request等同</span></span><br><span class="line">    $req_params = $request-&gt;all();</span><br><span class="line">    $validator = Validator::make($req_params, [</span><br><span class="line">        <span class="string">'title'</span> =&gt; <span class="string">'required|string'</span>,</span><br><span class="line">        <span class="string">'content'</span> =&gt; <span class="string">'required|string'</span>,</span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($validator-&gt;fails()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'验证失败'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证通过</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="验证规则"><a href="#验证规则" class="headerlink" title="验证规则"></a>验证规则</h2><table><thead><tr><th>规则</th><th>说明</th></tr></thead><tbody><tr><td>required</td><td>验证字段必须出现在输入数据中，不能为空</td></tr><tr><td>present</td><td>验证字段必须出现在输入数据中，可以为空</td></tr><tr><td>filled</td><td>验证字段可不在输入数据中，当验证字段出现在数据中时，不能为空</td></tr><tr><td>nullable</td><td>验证字段的值可以为 <code>null</code></td></tr><tr><td>accepted</td><td>验证的字段必须为 yes、 on、 1、或 true</td></tr><tr><td>active_url</td><td>相当于使用了 PHP 函数 dns_get_record，验证的字段必须具有有效的 A 或 AAAA 记录</td></tr><tr><td>after:date</td><td>验证的字段必须是给定日期后的值。这个日期将会通过 PHP 函数 strtotime 来验证<br>`’start_date’ =&gt; ‘required</td><td>date</td><td>after:tomorrow’<code>&lt;br&gt;你也可以指定其它的字段来比较日期</code>‘finish_date’ =&gt; ‘required</td><td>date</td><td>after:start_date’`</td></tr><tr><td>after_or_equal:date</td><td>验证的字段必须等于给定日期或之后的值。更多信息请参见 after 规则</td></tr><tr><td>alpha</td><td>验证的字段必须完全是字母的字符</td></tr><tr><td>alpha_dash</td><td>验证的字段可能具有字母、数字、破折号（ - ）以及下划线（ _ ）</td></tr><tr><td>alpha_num</td><td>验证的字段必须完全是字母、数字</td></tr><tr><td>array</td><td>验证的字段必须是一个 PHP 数组</td></tr><tr><td>before:date</td><td>验证的字段必须是给定日期之前的值。这个日期将会通过 PHP 函数 strtotime 来验证</td></tr><tr><td>before_or_equal:date</td><td>验证的字段必须等于给定日期或之前的值。这个日期将会使用 PHP 函数 strtotime 来验证</td></tr><tr><td>between:min,max</td><td>验证的字段的大小必须在给定的 min 和 max 之间。字符串、数字、数组或是文件大小的计算方式都用 size 方法进行评估<br>当需要验证表单数据中数字的大小时，在验证规则中一定要加入 Numeric 或 Integer 其一，size、between、max、min这些验证才会起作用</td></tr><tr><td>boolean</td><td>验证的字段必须能够被转换为布尔值。可接受的参数为 true、false、1、0、“1” 以及 “0”</td></tr><tr><td>confirmed</td><td>验证的字段必须和 foo_confirmation 的字段值一致。例如，如果要验证的字段是 password，输入中必须存在匹配的 password_confirmation 字段</td></tr><tr><td>date</td><td>验证的字段值必须是通过 PHP 函数 strtotime 校验的有效日期</td></tr><tr><td>date_equals:date</td><td>验证的字段必须等于给定的日期。该日期会被传递到 PHP 函数 strtotime</td></tr><tr><td>date_format:format</td><td>验证的字段必须与给定的格式相匹配。你应该只使用 date 或 date_format 其中一个用于验证，而不应该同时使用两者</td></tr><tr><td>different:field</td><td>验证的字段值必须与字段 (field) 的值不同</td></tr><tr><td>digits:value</td><td>验证的字段必须是数字，并且必须具有确切的值</td></tr><tr><td>digits_between:min,max</td><td>验证的字段的长度必须在给定的 min 和 max 之间</td></tr><tr><td>dimensions</td><td>验证的文件必须是图片并且图片比例必须符合规则<br><code>&#39;avatar&#39; =&gt; &#39;dimensions:min_width=100,min_height=200&#39;</code><br>可用的规则为： min_width、 max_width 、 min_height 、 max_height 、 width 、 height 、 ratio<br>比例应该使用宽度除以高度的方式来约束。这样可以通过 3/2 这样的语句或像 1.5 这样的浮点的约束<br><code>&#39;avatar&#39; =&gt; &#39;dimensions:ratio=3/2&#39;</code><br>由于此规则需要多个参数，因此你可以 Rule::dimensions 方法来构造可读性高的规则<br><code>use Illuminate\Validation\Rule;</code><br><code>Validator::make($data, [</code><br><code>&#39;avatar&#39; =&gt; [</code><br><code>&#39;required&#39;,</code><br><code>Rule::dimensions()-&gt;maxWidth(1000)-&gt;maxHeight(500)-&gt;ratio(3 / 2),</code><br><code>],</code><br><code>]);</code></td></tr><tr><td>distinct</td><td>验证数组时，指定的字段不能有任何重复值<br><code>‘foo.*.id’ =&gt; ‘distinct’</code></td></tr><tr><td>email</td><td>验证的字段必须符合 e-mail 地址格式</td></tr><tr><td>exists:table,column</td><td>验证的字段必须存在于给定的数据库表中</td></tr><tr><td></td></tr></tbody></table><h2 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h2><p>在 Laravel 中，一个字段满足下面任何一条都将被视为空值：</p><ul><li><code>null</code></li><li>空字符串 ‘ ‘</li><li>空数组 <code>[ ]</code> 或空 <code>countable</code> 对象</li><li>无路径的上传文件</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;简单的表单验证1&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Request $request)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// request() 与 $request等同&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;validate(request(), [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;title&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;required|string&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;content&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;required|string&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 验证通过&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="PHP框架" scheme="https://xinyufeng.net/categories/PHP%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Laravel" scheme="https://xinyufeng.net/categories/PHP%E6%A1%86%E6%9E%B6/Laravel/"/>
    
    
      <category term="Laravel技巧" scheme="https://xinyufeng.net/tags/Laravel%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 模型的 scope 普通用法和全局用法</title>
    <link href="https://xinyufeng.net/2022/04/28/Laravel-%E6%A8%A1%E5%9E%8B%E7%9A%84-scope-%E6%99%AE%E9%80%9A%E7%94%A8%E6%B3%95%E5%92%8C%E5%85%A8%E5%B1%80%E7%94%A8%E6%B3%95/"/>
    <id>https://xinyufeng.net/2022/04/28/Laravel-模型的-scope-普通用法和全局用法/</id>
    <published>2022-04-28T02:47:07.000Z</published>
    <updated>2022-04-28T02:56:04.489Z</updated>
    
    <content type="html"><![CDATA[<p>在数据查询中经常会使用条件查询，这些查询条件有些是相同的，<code>scope</code>可以实现这些相同条件查询的复用。</p><h2 id="普通-scope"><a href="#普通-scope" class="headerlink" title="普通 scope"></a>普通 <code>scope</code></h2><p><strong>定义</strong></p><p>方法名为 <code>scope</code> + 首字母大写单词 (这个可以随便定义)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">scopeStatus</span><span class="params">($query)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $query-&gt;where(<span class="string">'status'</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>使用</strong></p><p>其中调用去掉 <code>scope</code> 后，首字母小写的那个函数。</p><p>scopeStatus () 调用 status ()。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User::status()-&gt;get();</span><br></pre></td></tr></table></figure><h2 id="全局-scope"><a href="#全局-scope" class="headerlink" title="全局 scope"></a>全局 <code>scope</code></h2><p>我们需要重新定义 <code>boot</code> 方法，集成父类 <code>boot</code> 以后，添加全局 <code>scope</code>，这样默认就已经全局使用了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">parent</span>::boot(); <span class="comment">// <span class="doctag">TODO:</span> Change the autogenerated stub</span></span><br><span class="line">    <span class="keyword">static</span>::addGlobalScope(<span class="string">'avaiable'</span>,<span class="function"><span class="keyword">function</span> <span class="params">(Builder $builder)</span></span>&#123;</span><br><span class="line">        $builder-&gt;whereIn(<span class="string">'status'</span>, [<span class="number">0</span>, <span class="number">1</span>]);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们有的时候有的查询是不需要这个全局 <code>scope</code> 的时候，我们只需要去掉就可以。</p><p>使用 <code>withOutGlobalScope()</code>方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Post::withOutGlobalScope(<span class="string">'avaiable'</span>)-&gt;get();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在数据查询中经常会使用条件查询，这些查询条件有些是相同的，&lt;code&gt;scope&lt;/code&gt;可以实现这些相同条件查询的复用。&lt;/p&gt;
&lt;h2 id=&quot;普通-scope&quot;&gt;&lt;a href=&quot;#普通-scope&quot; class=&quot;headerlink&quot; title=&quot;普通 scope&quot;&gt;&lt;/a&gt;普通 &lt;code&gt;scope&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;方法名为 &lt;code&gt;scope&lt;/code&gt; + 首字母大写单词 (这个可以随便定义)&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;scopeStatus&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;($query)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; $query-&amp;gt;where(&lt;span class=&quot;string&quot;&gt;&#39;status&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="PHP框架" scheme="https://xinyufeng.net/categories/PHP%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Laravel" scheme="https://xinyufeng.net/categories/PHP%E6%A1%86%E6%9E%B6/Laravel/"/>
    
    
      <category term="Laravel技巧" scheme="https://xinyufeng.net/tags/Laravel%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
</feed>
